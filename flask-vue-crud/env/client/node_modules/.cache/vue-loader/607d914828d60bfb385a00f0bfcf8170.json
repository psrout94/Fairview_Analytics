{"remainingRequest":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/src/components/AlphaContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/src/components/AlphaContainer.vue","mtime":1586635520387},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AlphaContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoQA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AlphaContainer.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container\">\n    <v-app-bar\n      app\n      color=\"blue darken-4\"\n      dark\n      dense\n      >\n      <v-toolbar-title>Global Analytics -- AlphaVantage</v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-toolbar-title v-if=\"stockname\"> Current Commodity: {{ stockname }}</v-toolbar-title>\n      <template>\n        <v-menu offset-y v-if=\"stockname\">\n          <template v-slot:activator=\"{ on }\">\n            <v-btn small icon fab\n              :items=\"menuoptions\"\n              v-if=\"stockname\"\n              v-on=\"on\">\n              <v-icon>mdi-chevron-down</v-icon>\n            </v-btn>\n          </template>\n          <v-list>\n            <v-list-item\n              v-for=\"(item, index) in menuoptions\"\n              :key=\"index\"\n              @click=\"dummy(item)\"\n            >\n              <v-list-item-title>{{ item }}</v-list-item-title>\n            </v-list-item>\n          </v-list>\n        </v-menu>\n      </template>\n      <v-btn v-if=\"stockname\" @click=\"cleardata\" small icon fab>\n        <v-icon>mdi-plus</v-icon>\n      </v-btn>\n      <v-spacer></v-spacer>\n      <v-btn @click=\"CallSEC\" color=\"blue darken-4\">\n        Sec\n      </v-btn>\n      <v-btn @click=\"CallAgriculture\" color=\"blue darken-4\">\n        Agricultural\n      </v-btn>\n      <v-btn @click=\"CallEconomic\" color=\"blue darken-4\">\n        Economic\n      </v-btn>\n      <v-btn @click=\"CallFred\" color=\"blue darken-4\">\n        Fred\n      </v-btn>\n      <v-btn @click=\"dummy('Weather')\" color=\"blue darken-4\">\n        Weather\n      </v-btn>\n      <v-btn @click=\"home\" color=\"blue darken-4\">\n        Home\n      </v-btn>\n    </v-app-bar>\n    <br><br>\n    <template name=\"formcomponent\">\n      <v-select\n        v-if=\"!stockresults\"\n        v-model=\"selectdataoption\"\n        :items=\"alphadataoptions\"\n        label=\"Select an alphadata function\"\n        chips\n        clearable\n      ></v-select>\n      <v-select\n        v-if=\"selectdataoption==='Stock Time Series'\"\n        v-model=\"selectstockoption\"\n        :items=\"alphastockoptions\"\n        label=\"Select a time series option\"\n        chips\n        clearable\n      ></v-select>\n      <v-select\n        v-if=\"selectdataoption==='Tech Indicators'\"\n        v-model=\"selecttechindicator\"\n        :items=\"alphatechindicators\"\n        label=\"Select tech indicator\"\n        chips\n        clearable\n      ></v-select>\n      <v-combobox\n        v-if=\"selecttechindicator!==''\"\n        v-model=\"selecttechindicatorsymbol\"\n        :items=\"alphatechindicatorsymbols\"\n        label=\"Select a security\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selecttechindicatorsymbol!==''\"\n        v-model=\"selecttechindicatortimeperiod\"\n        :items=\"alphatechindicatortimeperiod\"\n        label=\"Select time period\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-select\n        v-if=\"selecttechindicatortimeperiod!==''\"\n        v-model=\"selecttechseriestype\"\n        :items=\"alphatechseriestype\"\n        label=\"Select series type\"\n        chips\n        clearable\n      ></v-select>\n      <v-combobox\n        v-if=\"selectstockoption!==''\"\n        v-model=\"selectstock\"\n        :items=\"alphabluechipstocks\"\n        label=\"Select a stock or type in symbol\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-select\n        v-if=\"selectdataoption==='Forex'\"\n        v-model=\"selectfxoption\"\n        :items=\"alphafxoptions\"\n        label=\"Select a forex option\"\n        chips\n        clearable\n      ></v-select>\n      <v-select\n        v-if=\"selectdataoption==='Crypto'\"\n        v-model=\"selectcryptooption\"\n        :items=\"alphacryptooptions\"\n        label=\"Select a crypto option\"\n        chips\n        clearable\n      ></v-select>\n      <v-combobox\n        v-if=\"selectcryptooption!=''\"\n        v-model=\"firstcryptocurrency\"\n        :items=\"alphacryptocurrencies\"\n        label=\"Select a currency to convert from\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"firstcryptocurrency!=''\"\n        v-model=\"secondcryptocurrency\"\n        :items=\"alphafxcurrencies\"\n        label=\"Select a currency to convert to\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectfxoption!=''\"\n        v-model=\"firstfxcurrency\"\n        :items=\"alphafxcurrencies\"\n        label=\"Select a currency to convert from\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"firstfxcurrency!=''\"\n        v-model=\"secondfxcurrency\"\n        :items=\"alphafxcurrencies\"\n        label=\"Select a currency to convert to\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-select\n        v-if=\"selectdataoption==='Sector Performance'\"\n        v-model=\"sectorperformancetime\"\n        :items=\"alphasectorperformancetime\"\n        label=\"Select a time frame\"\n        chips\n        clearable\n      ></v-select>\n      <v-btn color=\"primary\" v-if=\"selectstock!==''\" @click=\"getTimeSeries\">\n        Query Stock Data\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"secondfxcurrency!==''\" @click=\"getForex\">\n        Query Forex Data\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"secondcryptocurrency!==''\" @click=\"getCrypto\">\n        Query Crypto Data\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"sectorperformancetime !==''\" @click=\"getSecPer\">\n        Query Sector Performance\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"selecttechseriestype !==''\" @click=\"getTechIndicators\">\n        Query Tech Indicators\n      </v-btn>\n    </template>\n    <template v-if=\"alphadata.TimeSeries.length > 0\">\n      <v-data-table\n        :headers=\"headers\"\n        :items=\"alphadata.TimeSeries\"\n        class=\"elevation-1\"\n      >\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaquotedata.length > 0\">\n      <v-data-table\n        :headers=\"quoteheaders\"\n        :items=\"alphaquotedata\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaForexData.length > 0\">\n      <v-data-table\n        :headers=\"forexheaders\"\n        :items=\"alphaForexData\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphafxcurrencydata.length > 0\">\n      <v-data-table\n        :headers=\"alphafxcurrencyheader\"\n        :items=\"alphafxcurrencydata\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaCryptoData.length > 0\">\n      <v-data-table\n        :headers=\"cryptoheaders\"\n        :items=\"alphaCryptoData\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaTechData.length > 0\">\n      <v-data-table\n        :headers=\"techheaders\"\n        :items=\"alphaTechData\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaSecData.length > 0\">\n      <v-data-table\n        :headers=\"secheaders\"\n        :items=\"alphaSecData\"\n        class=\"elevation-1\"\n        disable-sort\n        hide-default-footer>\n      </v-data-table>\n    </template>\n    <template>\n      <GoogleChart v-if=\"showchart\" :title=\"chartTitle\"\n      :chartData=\"chartData\"></GoogleChart>\n    </template>\n    <v-dialog\n      class=\"flow_chart\"\n      v-model=\"showerror\"\n      max-width=\"290\">\n      <v-card>\n        <v-card-title>Error</v-card-title>\n        <v-card-text>\n          400 Error -- Bad Request\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"red\" small @click=\"closeError\">Close</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport RepositoryFactory from '../repositories/RepositoryFactory';\nimport store from '../store';\n\nconst PostsRepository = RepositoryFactory.get('posts');\nexport default {\n  store,\n  data() {\n    return {\n      components: {\n      },\n      alphaSecData: [],\n      secheaders: [{ text: 'Communication Services', value: 'comsserv' }, { text: 'Consumer Discretionary', value: 'consdisc' }, { text: 'Consumer Staples', value: 'consstaps' }, { text: 'Energy', value: 'energy' }, { text: 'Financials', value: 'financials' }, { text: 'Health Care', value: 'health' }, { text: 'Industrials', value: 'industrials' }, { text: 'IT', value: 'it' }, { text: 'Materials', value: 'materials' }, { text: 'Real Estate', value: 'real' }, { text: 'Utilities', value: 'utils' }],\n      sectorperformancetime: '',\n      alphasectorperformancetime: ['Real Time', '1 Day', '5 Day', '1 Month', '3 Month', 'Fiscal Year', '1 Year', '3 Year', '5 Year', '10 Year'],\n      techheaders: [{ text: 'Value', value: 'value' }, { text: 'Index', value: 'index' }, { text: 'Date', value: 'date' }],\n      alphaTechData: [],\n      alphaquotedata: [],\n      quoteheaders: [{ text: 'Symbol', value: 'Symbol' }, { text: 'Open', value: 'Open' }, { text: 'High', value: 'High' }, { text: 'Low', value: 'Low' }, { text: 'Price', value: 'Price' }, { text: 'Volume', value: 'Volume' }, { text: 'Latest Trading Day', value: 'LatestTradingDay' }, { text: 'Previous Close', value: 'PreviousClose' }, { text: 'Change', value: 'Change' }, { text: 'Change Percent', value: 'ChangePercent' }],\n      alphadata: {\n        MetaData: [],\n        TimeSeries: [],\n      },\n      headers: [{ text: 'Open', value: 'open' }, { text: 'Close', value: 'close' }, { text: 'High', value: 'high' }, { text: 'Low', value: 'low' }, { text: 'Volume', value: 'volume' }, { text: 'Date (Eastern)', value: 'date' }],\n      subheaders: [],\n      forexheaders: [{ text: 'Open', value: 'open' }, { text: 'Close', value: 'close' }, { text: 'High', value: 'high' }, { text: 'Low', value: 'low' }, { text: 'Date (UTC)', value: 'date' }],\n      alphaForexData: [],\n      cryptoheaders: [{ text: 'Open', value: 'open' }, { text: 'Close', value: 'close' }, { text: 'High', value: 'high' }, { text: 'Low', value: 'low' }, { text: 'Volume', value: 'volume' }, { text: 'Market Cap', value: 'market_cap' }, { text: 'Date', value: 'date' }],\n      alphaCryptoData: [],\n      drawer: false,\n      stockname: '',\n      menuoptions: ['Analyze', 'Metrics', 'Graphs'],\n      selectdataoption: '',\n      alphadataoptions: ['Stock Time Series', 'Forex', 'Crypto', 'Tech Indicators', 'Sector Performance'],\n      alphastockoptions: ['Intraday', 'Daily', 'Weekly', 'Monthly', 'Quote'],\n      alphabluechipstocks: ['AAPL', 'MSFT', 'AMZN', 'GOOG', 'FB'],\n      alphafxoptions: ['Currency Exchange Rate', 'Intraday', 'Daily', 'Weekly', 'Monthly'],\n      alphafxcurrencies: ['USD', 'EUR', 'CAD', 'CHF', 'CNY', 'DKK', 'GBP', 'INR', 'JPY', 'RUB'],\n      alphacryptocurrencies: ['BTC', 'ETH'],\n      alphacryptooptions: ['Currency Exchange Rate', 'Crypto Daily', 'Crypto Weekly', 'Crypto Monthly'],\n      alphatechindicators: ['SMA', 'EMA', 'RSI', 'ADX', 'CCI', 'AD', 'OBV'],\n      alphatechseriestype: ['High', 'Low', 'Close', 'Open'],\n      selecttechseriestype: '',\n      selecttechindicator: '',\n      selectcryptooption: '',\n      firstcryptocurrency: '',\n      secondcryptocurrency: '',\n      selectfxoption: '',\n      firstfxcurrency: '',\n      secondfxcurrency: '',\n      alphafxcurrencydata: [],\n      alphafxcurrencyheader: [{ text: 'From Currency', value: 'FromCurrency' }, { text: 'To Currency', value: 'ToCurrency' }, { text: 'Exchange Rate', value: 'ExchangeRate' }, { text: 'Last Report Time (UTC)', value: 'LastReportTime' }, { text: 'Bid Price', value: 'BidPrice' }, { text: 'Bid Ask', value: 'BidAsk' }],\n      selectstockoption: '',\n      selectstock: '',\n      searchparameters: '',\n      stockresults: false,\n      countcryptotimekeys: 0,\n      alphatechindicatorsymbols: ['FB', 'MSFT', 'AAPL', 'AMZN', 'GOOG'],\n      selecttechindicatorsymbol: '',\n      alphatechindicatortimeperiod: ['10', '20', '50', '100', '200'],\n      selecttechindicatortimeperiod: '',\n      analyzedata: false,\n      chartData: [['Date', 'High', 'Low']], // Array of Arrays\n      chartTitle: '',\n      moveable: {\n        draggable: true,\n      },\n      showchart: false,\n      showerror: false,\n    };\n  },\n  computed: {\n    alphaData() {\n      return this.$data.alphadata;\n    },\n  },\n  methods: {\n    async getTimeSeries() {\n      // this.isLoading = true;\n      const payload = {\n        dataoption: this.selectdataoption,\n        stockoption: this.selectstockoption,\n        stock: this.selectstock,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      // this.searchparameters = this.selectdataoption + ' / ' + this.selectstockoption;\n      this.selectdataoption = '';\n      this.selectstock = '';\n      this.selectstockoption = '';\n      this.MassageResponse(data);\n      this.stockresults = true;\n    },\n    async getSecPer() {\n      const payload = {\n        function: 'Sector',\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.selectdataoption = '';\n      let SectorObject = {};\n      if (this.sectorperformancetime === 'Real Time') {\n        SectorObject = data.RankARealTimePerformance;\n      } else if (this.sectorperformancetime === '1 Day') {\n        SectorObject = data.RankB1DayPerformance;\n      } else if (this.sectorperformancetime === '5 Day') {\n        SectorObject = data.RankC5DayPerformance;\n      } else if (this.sectorperformancetime === '1 Month') {\n        SectorObject = data.RankD1MonthPerformance;\n      } else if (this.sectorperformancetime === '3 Month') {\n        SectorObject = data.RankE3MonthPerformance;\n      } else if (this.sectorperformancetime === '1 Year') {\n        SectorObject = data.RankG1YearPerformance;\n      } else if (this.sectorperformancetime === '3 Year') {\n        SectorObject = data.RankH3YearPerformance;\n      } else if (this.sectorperformancetime === '5 Year') {\n        SectorObject = data.RankI5YearPerformance;\n      } else if (this.sectorperformancetime === '10 Year') {\n        SectorObject = data.RankJ10YearPerformance;\n      } else {\n        SectorObject = data.RankFYeartoDateYTDPerformance;\n      }\n      // const temporaryKeys = Object.keys(data);\n      this.buildSectorObject(SectorObject);\n      // const tempObject = data;\n      // const newArray = this.createCryptoData(data, temporaryKeys);\n      // console.log(newArray);\n      this.stockresults = true;\n    },\n    async getForex() {\n      this.isLoading = true;\n      const payload = {\n        function: this.selectfxoption,\n        from_currency: this.firstfxcurrency,\n        to_currency: this.secondfxcurrency,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.selectdataoption = '';\n      this.selectfxoption = '';\n      this.firstfxcurrency = '';\n      this.secondfxcurrency = '';\n      this.MassageResponse(data);\n      this.stockresults = true;\n    },\n    async getCrypto() {\n      this.isLoading = true;\n      const payload = {\n        function: this.selectcryptooption,\n        from_currency: this.firstcryptocurrency,\n        to_currency: this.secondcryptocurrency,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.selectdataoption = '';\n      this.selectcryptooption = '';\n      this.firstcryptocurrency = '';\n      this.secondcryptocurrency = '';\n      this.MassageResponse(data);\n      this.stockresults = true;\n    },\n    async getTechIndicators() {\n      this.isLoading = true;\n      const payload = {\n        function: this.selecttechindicator,\n        symbol: this.selecttechindicatorsymbol,\n        time_period: this.selecttechindicatortimeperiod,\n        series_type: this.selecttechseriestype,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.stockname = this.selecttechindicatorsymbol;\n      this.selectdataoption = '';\n      this.selecttechindicatorsymbol = '';\n      this.selecttechindicatortimeperiod = '';\n      this.selecttechseriestype = '';\n      this.MassageResponse(data);\n      this.selecttechindicator = '';\n      this.stockresults = true;\n    },\n    massageMetaData(metaKeys, AlphaObject) {\n      let nSubKey = '';\n      this.alphaquotedata = [];\n      let fromStockName = '';\n      for (let tempKey = 0; tempKey < metaKeys.length; tempKey += 1) {\n        const nKey = metaKeys[tempKey].toString();\n        const al = AlphaObject.MetaData[nKey]; // Alias to shorten line 122\n        // replacingtimeKeys that have numbers or special characters\n        const mystring = nKey.split('.').join('');\n        nSubKey = mystring.replace(/[0-9]/g, ' ');\n        if (nSubKey === '  Symbol') {\n          this.stockname = al;\n        } else if (nSubKey === '  From Symbol' || nSubKey === '  To Symbol') { // For Forex Data\n          if (fromStockName !== '') {\n            this.stockname = `${fromStockName} to ${al} `;\n          } else {\n            fromStockName = al;\n          }\n        } else if (nSubKey === '  Digital Currency Code' || nSubKey === '  Market Code') { // For Forex Data\n          if (fromStockName !== '') {\n            this.stockname = `${fromStockName} to ${al} `;\n          } else {\n            fromStockName = al;\n          }\n        }\n      }\n    },\n    MassageResponse(AlphaObject) {\n      if (AlphaObject === 'Error') {\n        this.showerror = true;\n        return;\n      }\n      const StartingObject = AlphaObject;\n      const originalTimeKeys = Object.keys(StartingObject);\n      const [meta, time] = originalTimeKeys;\n      // eslint-disable-next-line\n      console.log(meta);\n      if (StartingObject.RealtimeCurrencyExchangeRate) {\n        // StartingObject.originalTimeKey = AlphaObject[time];\n        this.doCurrencyExchange(StartingObject.RealtimeCurrencyExchangeRate);\n        return;\n      }\n      const forexIndex = time.indexOf('TimeSeriesFX');\n      const cryptoIndex = time.indexOf('TimeSeriesDigitalCurrency');\n      const techIndex = time.indexOf('TechnicalAnalysis');\n      StartingObject.originalTimeKey = AlphaObject[time];\n      if (StartingObject.GlobalQuote) {\n        this.giveQuote(StartingObject.GlobalQuote);\n      } else if (techIndex !== -1) {\n        this.createTechIndicatorData(StartingObject, time, this.selecttechindicator);\n      } else {\n        const metaKeys = Object.keys(StartingObject.MetaData);\n        this.massageMetaData(metaKeys, StartingObject);\n        const timeKeys = Object.keys(StartingObject[time]);\n        let newSubKey = '';\n        for (let key = 0; key < timeKeys.length; key += 1) {\n          const tempArray = [];\n          const newKey = timeKeys[key].toString();\n          const subKeys = Object.keys(StartingObject.originalTimeKey[newKey]);\n          const a = StartingObject.originalTimeKey[newKey]; // Alias to shorten line 122\n          // replacing time keys that have numbers or special characters\n          for (let nKeys = 0; nKeys < subKeys.length; nKeys += 1) {\n            const mystring = subKeys[nKeys].split('.').join('');\n            newSubKey = mystring.replace(/[0-9]/g, ' ');\n            if (newSubKey !== subKeys[nKeys]) {\n              a[newSubKey] = a[subKeys[nKeys]];\n              delete a[subKeys[nKeys]];\n              tempArray.push(a[newSubKey]);\n            }\n          }\n          tempArray.push(newKey);\n          if (forexIndex !== -1) {\n            this.createForexData(tempArray);\n          } else if (cryptoIndex !== -1) {\n            this.createCryptoData(tempArray, timeKeys);\n          } else {\n            const newTimeObject = {\n              open: tempArray[0],\n              high: tempArray[1],\n              low: tempArray[2],\n              close: tempArray[3],\n              volume: tempArray[4],\n              date: tempArray[5],\n            };\n            // eslint-disable-next-line\n            console.log(newTimeObject);\n            if (Object.entries(newTimeObject).length !== 0) {\n              this.alphaData.TimeSeries.push(newTimeObject);\n            }\n          }\n        }\n      }\n    },\n    giveQuote(quote) {\n      const QuoteKeys = Object.keys(quote);\n      let tempArray = [];\n      tempArray = this.prepObject(quote, QuoteKeys);\n      const newObject = {\n        Symbol: tempArray[0],\n        Open: tempArray[1],\n        High: tempArray[2],\n        Low: tempArray[3],\n        Price: tempArray[4],\n        Volume: tempArray[5],\n        LatestTradingDay: tempArray[6],\n        PreviousClose: tempArray[7],\n        Change: tempArray[8],\n        ChangePercent: tempArray[9],\n      };\n      this.alphaquotedata = [];\n      if (Object.entries(newObject).length !== 0) {\n        this.alphaquotedata.push(newObject);\n      }\n    },\n    doCurrencyExchange(fxObject) {\n      const fxKeys = Object.keys(fxObject);\n      let tempArray = [];\n      tempArray = this.prepObject(fxObject, fxKeys);\n      const newForexObject = {\n        FromCurrency: tempArray[0],\n        ToCurrency: tempArray[2],\n        ExchangeRate: tempArray[4],\n        LastReportTime: tempArray[5],\n        BidPrice: tempArray[7],\n        BidAsk: tempArray[8],\n      };\n      if (Object.entries(newForexObject).length !== 0) {\n        this.alphafxcurrencydata.push(newForexObject);\n      }\n      this.stockname = `${newForexObject.FromCurrency} to ${newForexObject.ToCurrency} `;\n    },\n    createCryptoData(tempArray, timeKeys) {\n      const newCryptoObject = {\n        open: tempArray[0],\n        high: tempArray[2],\n        low: tempArray[4],\n        close: tempArray[6],\n        volume: tempArray[7],\n        market_cap: tempArray[8],\n        date: timeKeys[this.countcryptotimekeys],\n      };\n      this.countcryptotimekeys += 1;\n      if (Object.entries(newCryptoObject).length !== 0) {\n        this.alphaCryptoData.push(newCryptoObject);\n      }\n    },\n    createForexData(tempArray) {\n      const newForexObject = {\n        open: tempArray[0],\n        high: tempArray[1],\n        low: tempArray[2],\n        close: tempArray[3],\n        date: tempArray[4],\n      };\n      if (Object.entries(newForexObject).length !== 0) {\n        this.alphaForexData.push(newForexObject);\n      }\n    },\n    createTechIndicatorData(StartingObject, time, indicator) {\n      const timeKeys = Object.keys(StartingObject[time]);\n      let newSubKey = '';\n      // eslint-disable-next-line\n      console.log(indicator);\n      for (let key = 0; key < timeKeys.length; key += 1) {\n        const tempArray = [];\n        const newKey = timeKeys[key].toString();\n        const subKeys = Object.keys(StartingObject.originalTimeKey[newKey]);\n        const a = StartingObject.originalTimeKey[newKey]; // Alias to shorten line 122\n        // replacing time keys that have numbers or special characters\n        for (let nKeys = 0; nKeys < subKeys.length; nKeys += 1) {\n          const mystring = subKeys[nKeys].split('.').join('');\n          newSubKey = mystring.replace(/[0-9]/g, ' ');\n          a[newSubKey] = a[subKeys[nKeys]];\n          tempArray.push(a[newSubKey]);\n        }\n        tempArray.push(newSubKey);\n        tempArray.push(newKey);\n        const techObject = {\n          value: tempArray[0],\n          index: tempArray[1],\n          date: tempArray[2],\n        };\n        this.alphaTechData.push(techObject);\n      }\n    },\n    prepObject(newObject, tempKeys) {\n      const tempObject = newObject;\n      const tempArray = [];\n      for (let key = 0; key < tempKeys.length; key += 1) {\n        const newKey = tempKeys[key].toString();\n        const mystring = newKey.split('.').join('');\n        const newSubKey = mystring.replace(/[0-9]/g, ' ');\n        if (newSubKey !== newObject[key]) {\n          tempObject[newSubKey] = tempObject[newKey];\n          delete tempObject[newKey];\n          tempArray.push(tempObject[newSubKey]);\n          if (key === 0) {\n            this.stockname = tempObject[newSubKey];\n          }\n        }\n      }\n      return tempArray;\n    },\n    buildSectorObject(StartingObject) {\n      this.stockname = this.sectorperformancetime;\n      const timeKeys = Object.keys(StartingObject);\n      const tempArray = [];\n      for (let key = 0; key < timeKeys.length; key += 1) {\n        const newKey = timeKeys[key].toString();\n        tempArray.push(StartingObject[newKey]);\n        this.secheaders.push(timeKeys[key]);\n      }\n      const SecObject = {\n        comsserv: tempArray[0],\n        consdisc: tempArray[1],\n        consstaps: tempArray[2],\n        energy: tempArray[3],\n        financials: tempArray[4],\n        health: tempArray[5],\n        industrials: tempArray[6],\n        it: tempArray[7],\n        materials: tempArray[8],\n        real: tempArray[9],\n        utils: tempArray[10],\n      };\n      this.alphaSecData.push(SecObject);\n      this.sectorperformancetime = '';\n    },\n    cleardata() {\n      this.stockname = '';\n      this.stockresults = false;\n      if (this.alphadata.TimeSeries.length > 0) {\n        this.alphadata.TimeSeries = []; // To clear the Object\n        this.alphadata.TimeSeries.pop(); // To remove the empty object from the array\n      } else if (this.alphaquotedata.length > 0) {\n        this.alphaquotedata = [];\n        this.alphaquotedata.pop();\n      } else if (this.alphaForexData.length > 0) {\n        this.alphaForexData = [];\n        this.alphaquotedata.pop();\n      } else if (this.alphafxcurrencydata.length > 0) {\n        this.alphafxcurrencydata = [];\n        this.alphafxcurrencydata.pop();\n      } else if (this.alphaCryptoData.length > 0) {\n        this.alphaCryptoData = [];\n        this.alphaCryptoData.pop();\n        this.countcryptotimekeys = 0;\n      } else if (this.alphaTechData.length > 0) {\n        this.alphaTechData = [];\n        this.alphaTechData.pop();\n      } else if (this.alphaSecData.length > 0) {\n        this.alphaSecData = [];\n        this.alphaSecData.pop();\n      }\n      this.chartData = [['Date', 'High', 'Low']]; // Array of Arrays;\n    },\n    home() {\n      // this.$store.commit('ShowAlpha', false);\n      this.$router.push('/');\n    },\n    clearChart() {\n      this.chartData = [['Date', 'High', 'Low']];\n      this.showGraphs();\n    },\n    showGraphs() {\n      // eslint-disable-next-line\n      this.chartTitle = this.stockname;\n      this.showchart = true;\n      if (this.alphaData.TimeSeries.length > 0) {\n        for (let x = 0; x < this.alphaData.TimeSeries.length; x += 1) {\n          this.chartData.push([this.alphaData.TimeSeries[x].date,\n            Number(this.alphaData.TimeSeries[x].high), // Cast the string value to a number\n            Number(this.alphaData.TimeSeries[x].low)]); // Cast the string value to a number\n        }\n      } else if (this.alphaForexData.length > 0) {\n        for (let x = 0; x < this.alphaForexData.length; x += 1) {\n          this.chartData.push([this.alphaForexData[x].date,\n            Number(this.alphaForexData[x].high),\n            Number(this.alphaForexData[x].low)]);\n        }\n      } else if (this.alphaCryptoData.length > 0) {\n        for (let x = 0; x < this.alphaCryptoData.length; x += 1) {\n          this.chartData.push([this.alphaCryptoData[x].date,\n            Number(this.alphaCryptoData[x].high),\n            Number(this.alphaCryptoData[x].low)]);\n        }\n      } else {\n        this.chartTitle = 'This Data could not be displayed';\n      }\n    },\n    dummy(item) {\n      if (item === 'Graphs') {\n        this.showGraphs();\n      } else {\n        // eslint-disable-next-line\n        console.log(item);\n      }\n    },\n    CallSEC() {\n      this.$router.push('/sec');\n    },\n    CallAgriculture() {\n      this.$router.push('/agriculture');\n    },\n    CallEconomic() {\n      this.$router.push('/economic');\n    },\n    CallFred() {\n      this.$router.push('/fred');\n    },\n    handleDrag({ target, transform }) {\n      // eslint-disable-next-line\n      console.log('onDrag left, top', transform);\n      target.style.transform = transform; // eslint-disable-line no-param-reassign\n    },\n    close() {\n      this.showchart = false;\n      this.chartData = [['Date', 'High', 'Low']]; // Array of Arrays;\n    },\n    closeError() {\n      this.showerror = false;\n      this.stockresults = false;\n    },\n  },\n  created() {\n    this.alphadata.TimeSeries = [];\n    this.alphaquotedata = [];\n  },\n};\n</script>\n"]}]}