{"remainingRequest":"/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pstout/practice_folder/flask-vue-crud/env/client/src/components/AlphaContainer.vue?vue&type=style&index=0&id=58c7d973&scoped=true&lang=css&","dependencies":[{"path":"/Users/pstout/practice_folder/flask-vue-crud/env/client/src/components/AlphaContainer.vue","mtime":1582910563937},{"path":"/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmxlZnR7CiAgbGVmdDogNzUlICFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["AlphaContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0LA;AACA;AACA","file":"AlphaContainer.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container\">\n    <v-app-bar\n      app\n      color=\"black\"\n      dark\n      dense\n      >\n      <v-toolbar-title>Global Analytics -- AlphaVantage</v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-toolbar-title v-if=\"stockname\"> Current Stock: {{ stockname }}\n        <v-btn text small icon>\n          <v-icon>mdi-chevron-down</v-icon>\n        </v-btn>\n      </v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-btn>\n        Agricultural\n      </v-btn>\n      <v-btn>\n        Economic\n      </v-btn>\n      <v-btn>\n        Weather\n      </v-btn>\n      <v-btn @click=\"home\">\n        Home\n      </v-btn>\n    </v-app-bar>\n    <br><br>\n    <template>\n      <v-combobox\n        v-if=\"alphadata.TimeSeries.length === 0\"\n        v-model=\"selectdataoption\"\n        :items=\"alphadataoptions\"\n        label=\"Select an alphadata function\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectdataoption==='Stock Time Series'\"\n        v-model=\"selectstockoption\"\n        :items=\"alphastockoptions\"\n        label=\"Select a time series option\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectstockoption!==''\"\n        v-model=\"selectstock\"\n        :items=\"alphabluechipstocks\"\n        label=\"Select a bluechip or type in your own\"\n        chips\n        clearable\n      ></v-combobox>\n      <div class=\"left\">\n        <v-btn color=\"primary\" dark large v-if=\"selectstock!==''\">Query Alpha</v-btn>\n      </div>\n    </template>\n    <template>\n      <v-data-table v-if=\"alphadata.TimeSeries.length > 1\"\n        :headers=\"headers\"\n        :items=\"alphadata.TimeSeries\"\n        class=\"elevation-1\"\n      ></v-data-table>\n    </template>\n      <v-footer\n      color=\"black\"\n      app\n      dark>\n        <v-spacer></v-spacer>\n        <div>&copy; Global Analytics {{ new Date().getFullYear() }}</div>\n      </v-footer>\n  </div>\n</template>\n\n<script>\nimport RepositoryFactory from '../repositories/RepositoryFactory';\nimport store from '../store';\n\nconst PostsRepository = RepositoryFactory.get('posts');\nexport default {\n  store,\n  data() {\n    return {\n      alphadata: {\n        MetaData: [{}],\n        TimeSeries: [{}],\n      },\n      headers: [{ text: 'open', value: 'open' }, { text: 'high', value: 'high' }, { text: 'low', value: 'low' }, { text: 'close', value: 'close' }, { text: 'volume', value: 'volume' }, { text: 'date', value: 'date' }],\n      subheaders: [],\n      drawer: false,\n      showalpha: this.$store.getters.ShowAlphaGetter,\n      stockname: '',\n      menuoptions: ['Analyze', 'Metrics', 'Graphs'],\n      selectdataoption: '',\n      alphadataoptions: ['Stock Time Series', 'Forex', 'Crypto', 'Tech Indicators', 'Sector Performance'],\n      alphastockoptions: ['Intraday', 'Daily', 'Weekly', 'Monthly', 'Quote'],\n      alphabluechipstocks: ['AAPL', 'MSFT', 'AMZN', 'GOOG', 'FB'],\n      selectstockoption: '',\n      selectstock: '',\n    };\n  },\n  computed: {\n    alphaData() {\n      return this.$data.alphadata;\n    },\n    SelectStockOption() {\n      const datastock = '';\n      if (this.$data.selectstockoption === undefined) {\n        return datastock;\n      }\n      return this.selectstockoption;\n    },\n  },\n  methods: {\n    async getTimeSeries() {\n      this.isLoading = true;\n      const { data } = await PostsRepository.getAlpha();\n      this.MassageResponse(data);\n    },\n\n    massageMetaData(metaKeys, AlphaObject) {\n      let nSubKey = '';\n      for (let tempKey = 0; tempKey < metaKeys.length; tempKey += 1) {\n        const nKey = metaKeys[tempKey].toString();\n        const al = AlphaObject.MetaData[nKey]; // Alias to shorten line 122\n        // replacingtimeKeys that have numbers or special characters\n        const mystring = nKey.split('.').join('');\n        nSubKey = mystring.replace(/[0-9]/g, ' ');\n        if (nSubKey === '  Symbol') {\n          this.stockname = al;\n        }\n      }\n    },\n\n    MassageResponse(AlphaObject) {\n      // this.alphadata.MetaData = AlphaObject.MetaData;\n      const metaKeys = Object.keys(AlphaObject.MetaData);\n      this.massageMetaData(metaKeys, AlphaObject);\n      const timeKeys = Object.keys(AlphaObject.TimeSeries15min);\n      let newSubKey = '';\n      for (let key = 0; key < timeKeys.length; key += 1) {\n        const tempArray = [];\n        const newKey = timeKeys[key].toString();\n        const subKeys = Object.keys(AlphaObject.TimeSeries15min[newKey]);\n        const a = AlphaObject.TimeSeries15min[newKey]; // Alias to shorten line 122\n        // replacingtimeKeys that have numbers or special characters\n        for (let nKeys = 0; nKeys < subKeys.length; nKeys += 1) {\n          const mystring = subKeys[nKeys].split('.').join('');\n          newSubKey = mystring.replace(/[0-9]/g, ' ');\n          if (newSubKey !== subKeys[nKeys]) {\n            a[newSubKey] = a[subKeys[nKeys]];\n            delete a[subKeys[nKeys]];\n            tempArray.push(a[newSubKey]);\n          }\n        }\n        tempArray.push(newKey);\n        const newTimeObject = {\n          open: tempArray[0],\n          high: tempArray[1],\n          low: tempArray[2],\n          close: tempArray[3],\n          volume: tempArray[4],\n          date: tempArray[5],\n        };\n        if (Object.entries(newTimeObject).length !== 0) {\n          this.alphaData.TimeSeries.push(newTimeObject);\n        }\n      }\n    },\n    home() {\n      // this.$store.commit('ShowAlpha', false);\n      this.$router.push('/');\n    },\n  },\n  created() {\n    this.alphadata.TimeSeries = [];\n    // this.getTimeSeries();\n  },\n  dummy(item) {\n    console.log(item);\n  },\n};\n</script>\n<style scoped>\n.left{\n  left: 75% !important;\n}\n</style>\n"]}]}