{"remainingRequest":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/babel-loader/lib/index.js!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/src/components/AlphaContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/src/components/AlphaContainer.vue","mtime":1586142168534},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AlphaContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container\">\n    <v-app-bar\n      app\n      color=\"blue darken-4\"\n      dark\n      dense\n      >\n      <v-toolbar-title>Global Analytics -- AlphaVantage</v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-toolbar-title v-if=\"stockname\"> Current Commodity: {{ stockname }}</v-toolbar-title>\n      <template>\n        <v-menu offset-y v-if=\"stockname\">\n          <template v-slot:activator=\"{ on }\">\n            <v-btn small icon fab\n              :items=\"menuoptions\"\n              v-if=\"stockname\"\n              v-on=\"on\">\n              <v-icon>mdi-chevron-down</v-icon>\n            </v-btn>\n          </template>\n          <v-list>\n            <v-list-item\n              v-for=\"(item, index) in menuoptions\"\n              :key=\"index\"\n              @click=\"dummy(item)\"\n            >\n              <v-list-item-title>{{ item }}</v-list-item-title>\n            </v-list-item>\n          </v-list>\n        </v-menu>\n      </template>\n      <v-btn v-if=\"stockname\" @click=\"cleardata\" small icon fab>\n        <v-icon>mdi-plus</v-icon>\n      </v-btn>\n      <v-spacer></v-spacer>\n      <v-btn @click=\"CallSEC\" color=\"blue darken-4\">\n        Sec\n      </v-btn>\n      <v-btn @click=\"CallAgriculture\" color=\"blue darken-4\">\n        Agricultural\n      </v-btn>\n      <v-btn @click=\"CallEconomic\" color=\"blue darken-4\">\n        Economic\n      </v-btn>\n      <v-btn @click=\"dummy('Weather')\" color=\"blue darken-4\">\n        Weather\n      </v-btn>\n      <v-btn @click=\"home\" color=\"blue darken-4\">\n        Home\n      </v-btn>\n    </v-app-bar>\n    <br><br>\n    <template name=\"formcomponent\">\n      <v-select\n        v-if=\"!stockresults\"\n        v-model=\"selectdataoption\"\n        :items=\"alphadataoptions\"\n        label=\"Select an alphadata function\"\n        chips\n        clearable\n      ></v-select>\n      <v-select\n        v-if=\"selectdataoption==='Stock Time Series'\"\n        v-model=\"selectstockoption\"\n        :items=\"alphastockoptions\"\n        label=\"Select a time series option\"\n        chips\n        clearable\n      ></v-select>\n      <v-select\n        v-if=\"selectdataoption==='Tech Indicators'\"\n        v-model=\"selecttechindicator\"\n        :items=\"alphatechindicators\"\n        label=\"Select tech indicator\"\n        chips\n        clearable\n      ></v-select>\n      <v-combobox\n        v-if=\"selecttechindicator!==''\"\n        v-model=\"selecttechindicatorsymbol\"\n        :items=\"alphatechindicatorsymbols\"\n        label=\"Select a security\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selecttechindicatorsymbol!==''\"\n        v-model=\"selecttechindicatortimeperiod\"\n        :items=\"alphatechindicatortimeperiod\"\n        label=\"Select time period\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-select\n        v-if=\"selecttechindicatortimeperiod!==''\"\n        v-model=\"selecttechseriestype\"\n        :items=\"alphatechseriestype\"\n        label=\"Select series type\"\n        chips\n        clearable\n      ></v-select>\n      <v-combobox\n        v-if=\"selectstockoption!==''\"\n        v-model=\"selectstock\"\n        :items=\"alphabluechipstocks\"\n        label=\"Select a stock or type in symbol\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-select\n        v-if=\"selectdataoption==='Forex'\"\n        v-model=\"selectfxoption\"\n        :items=\"alphafxoptions\"\n        label=\"Select a forex option\"\n        chips\n        clearable\n      ></v-select>\n      <v-select\n        v-if=\"selectdataoption==='Crypto'\"\n        v-model=\"selectcryptooption\"\n        :items=\"alphacryptooptions\"\n        label=\"Select a crypto option\"\n        chips\n        clearable\n      ></v-select>\n      <v-combobox\n        v-if=\"selectcryptooption!=''\"\n        v-model=\"firstcryptocurrency\"\n        :items=\"alphacryptocurrencies\"\n        label=\"Select a currency to convert from\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"firstcryptocurrency!=''\"\n        v-model=\"secondcryptocurrency\"\n        :items=\"alphafxcurrencies\"\n        label=\"Select a currency to convert to\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectfxoption!=''\"\n        v-model=\"firstfxcurrency\"\n        :items=\"alphafxcurrencies\"\n        label=\"Select a currency to convert from\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"firstfxcurrency!=''\"\n        v-model=\"secondfxcurrency\"\n        :items=\"alphafxcurrencies\"\n        label=\"Select a currency to convert to\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-select\n        v-if=\"selectdataoption==='Sector Performance'\"\n        v-model=\"sectorperformancetime\"\n        :items=\"alphasectorperformancetime\"\n        label=\"Select a time frame\"\n        chips\n        clearable\n      ></v-select>\n      <v-btn color=\"primary\" v-if=\"selectstock!==''\" @click=\"getTimeSeries\">\n        Query Stock Data\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"secondfxcurrency!==''\" @click=\"getForex\">\n        Query Forex Data\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"secondcryptocurrency!==''\" @click=\"getCrypto\">\n        Query Crypto Data\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"sectorperformancetime !==''\" @click=\"getSecPer\">\n        Query Sector Performance\n      </v-btn>\n      <!-- TODO create an API Call for tech indicators -->\n      <v-btn color=\"primary\" v-if=\"selecttechseriestype !==''\" @click=\"getTechIndicators\">\n        Query Tech Indicators\n      </v-btn>\n    </template>\n    <template v-if=\"alphadata.TimeSeries.length > 0\">\n      <v-data-table\n        :headers=\"headers\"\n        :items=\"alphadata.TimeSeries\"\n        class=\"elevation-1\"\n      >\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaquotedata.length > 0\">\n      <v-data-table\n        :headers=\"quoteheaders\"\n        :items=\"alphaquotedata\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaForexData.length > 0\">\n      <v-data-table\n        :headers=\"forexheaders\"\n        :items=\"alphaForexData\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphafxcurrencydata.length > 0\">\n      <v-data-table\n        :headers=\"alphafxcurrencyheader\"\n        :items=\"alphafxcurrencydata\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaCryptoData.length > 0\">\n      <v-data-table\n        :headers=\"cryptoheaders\"\n        :items=\"alphaCryptoData\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaTechData.length > 0\">\n      <v-data-table\n        :headers=\"techheaders\"\n        :items=\"alphaTechData\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaSecData.length > 0\">\n      <v-data-table\n        :headers=\"secheaders\"\n        :items=\"alphaSecData\"\n        class=\"elevation-1\"\n        disable-sort\n        hide-default-footer>\n      </v-data-table>\n    </template>\n    <template>\n      <GoogleChart v-if=\"showchart\" :title=\"chartTitle\"\n      :chartData=\"chartData\"></GoogleChart>\n    </template>\n    <v-dialog\n      class=\"flow_chart\"\n      v-model=\"showerror\"\n      max-width=\"290\">\n      <v-card>\n        <v-card-title>Error</v-card-title>\n        <v-card-text>\n          400 Error -- Bad Request\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"red\" small @click=\"closeError\">Close</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\nimport RepositoryFactory from '../repositories/RepositoryFactory';\nimport store from '../store';\n\nconst PostsRepository = RepositoryFactory.get('posts');\nexport default {\n  store,\n  data() {\n    return {\n      components: {\n      },\n      alphaSecData: [],\n      secheaders: [{ text: 'Communication Services', value: 'comsserv' }, { text: 'Consumer Discretionary', value: 'consdisc' }, { text: 'Consumer Staples', value: 'consstaps' }, { text: 'Energy', value: 'energy' }, { text: 'Financials', value: 'financials' }, { text: 'Health Care', value: 'health' }, { text: 'Industrials', value: 'industrials' }, { text: 'IT', value: 'it' }, { text: 'Materials', value: 'materials' }, { text: 'Real Estate', value: 'real' }, { text: 'Utilities', value: 'utils' }],\n      sectorperformancetime: '',\n      alphasectorperformancetime: ['Real Time', '1 Day', '5 Day', '1 Month', '3 Month', 'Fiscal Year', '1 Year', '3 Year', '5 Year', '10 Year'],\n      techheaders: [{ text: 'Value', value: 'value' }, { text: 'Index', value: 'index' }, { text: 'Date', value: 'date' }],\n      alphaTechData: [],\n      alphaquotedata: [],\n      quoteheaders: [{ text: 'Symbol', value: 'Symbol' }, { text: 'Open', value: 'Open' }, { text: 'High', value: 'High' }, { text: 'Low', value: 'Low' }, { text: 'Price', value: 'Price' }, { text: 'Volume', value: 'Volume' }, { text: 'Latest Trading Day', value: 'LatestTradingDay' }, { text: 'Previous Close', value: 'PreviousClose' }, { text: 'Change', value: 'Change' }, { text: 'Change Percent', value: 'ChangePercent' }],\n      alphadata: {\n        MetaData: [],\n        TimeSeries: [],\n      },\n      headers: [{ text: 'Open', value: 'open' }, { text: 'Close', value: 'close' }, { text: 'High', value: 'high' }, { text: 'Low', value: 'low' }, { text: 'Volume', value: 'volume' }, { text: 'Date (Eastern)', value: 'date' }],\n      subheaders: [],\n      forexheaders: [{ text: 'Open', value: 'open' }, { text: 'Close', value: 'close' }, { text: 'High', value: 'high' }, { text: 'Low', value: 'low' }, { text: 'Date (UTC)', value: 'date' }],\n      alphaForexData: [],\n      cryptoheaders: [{ text: 'Open', value: 'open' }, { text: 'Close', value: 'close' }, { text: 'High', value: 'high' }, { text: 'Low', value: 'low' }, { text: 'Volume', value: 'volume' }, { text: 'Market Cap', value: 'market_cap' }, { text: 'Date', value: 'date' }],\n      alphaCryptoData: [],\n      drawer: false,\n      stockname: '',\n      menuoptions: ['Analyze', 'Metrics', 'Graphs'],\n      selectdataoption: '',\n      alphadataoptions: ['Stock Time Series', 'Forex', 'Crypto', 'Tech Indicators', 'Sector Performance'],\n      alphastockoptions: ['Intraday', 'Daily', 'Weekly', 'Monthly', 'Quote'],\n      alphabluechipstocks: ['AAPL', 'MSFT', 'AMZN', 'GOOG', 'FB'],\n      alphafxoptions: ['Currency Exchange Rate', 'Intraday', 'Daily', 'Weekly', 'Monthly'],\n      alphafxcurrencies: ['USD', 'EUR', 'CAD', 'CHF', 'CNY', 'DKK', 'GBP', 'INR', 'JPY', 'RUB'],\n      alphacryptocurrencies: ['BTC', 'ETH'],\n      alphacryptooptions: ['Currency Exchange Rate', 'Crypto Daily', 'Crypto Weekly', 'Crypto Monthly'],\n      alphatechindicators: ['SMA', 'EMA', 'RSI', 'ADX', 'CCI', 'AD', 'OBV'],\n      alphatechseriestype: ['High', 'Low', 'Close', 'Open'],\n      selecttechseriestype: '',\n      selecttechindicator: '',\n      selectcryptooption: '',\n      firstcryptocurrency: '',\n      secondcryptocurrency: '',\n      selectfxoption: '',\n      firstfxcurrency: '',\n      secondfxcurrency: '',\n      alphafxcurrencydata: [],\n      alphafxcurrencyheader: [{ text: 'From Currency', value: 'FromCurrency' }, { text: 'To Currency', value: 'ToCurrency' }, { text: 'Exchange Rate', value: 'ExchangeRate' }, { text: 'Last Report Time (UTC)', value: 'LastReportTime' }, { text: 'Bid Price', value: 'BidPrice' }, { text: 'Bid Ask', value: 'BidAsk' }],\n      selectstockoption: '',\n      selectstock: '',\n      searchparameters: '',\n      stockresults: false,\n      countcryptotimekeys: 0,\n      alphatechindicatorsymbols: ['FB', 'MSFT', 'AAPL', 'AMZN', 'GOOG'],\n      selecttechindicatorsymbol: '',\n      alphatechindicatortimeperiod: ['10', '20', '50', '100', '200'],\n      selecttechindicatortimeperiod: '',\n      analyzedata: false,\n      chartData: [['Date', 'High', 'Low']], // Array of Arrays\n      chartTitle: '',\n      moveable: {\n        draggable: true,\n      },\n      showchart: false,\n      showerror: false,\n    };\n  },\n  computed: {\n    alphaData() {\n      return this.$data.alphadata;\n    },\n  },\n  methods: {\n    async getTimeSeries() {\n      // this.isLoading = true;\n      const payload = {\n        dataoption: this.selectdataoption,\n        stockoption: this.selectstockoption,\n        stock: this.selectstock,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      // this.searchparameters = this.selectdataoption + ' / ' + this.selectstockoption;\n      this.selectdataoption = '';\n      this.selectstock = '';\n      this.selectstockoption = '';\n      this.MassageResponse(data);\n      this.stockresults = true;\n    },\n    async getSecPer() {\n      const payload = {\n        function: 'Sector',\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.selectdataoption = '';\n      let SectorObject = {};\n      if (this.sectorperformancetime === 'Real Time') {\n        SectorObject = data.RankARealTimePerformance;\n      } else if (this.sectorperformancetime === '1 Day') {\n        SectorObject = data.RankB1DayPerformance;\n      } else if (this.sectorperformancetime === '5 Day') {\n        SectorObject = data.RankC5DayPerformance;\n      } else if (this.sectorperformancetime === '1 Month') {\n        SectorObject = data.RankD1MonthPerformance;\n      } else if (this.sectorperformancetime === '3 Month') {\n        SectorObject = data.RankE3MonthPerformance;\n      } else if (this.sectorperformancetime === '1 Year') {\n        SectorObject = data.RankG1YearPerformance;\n      } else if (this.sectorperformancetime === '3 Year') {\n        SectorObject = data.RankH3YearPerformance;\n      } else if (this.sectorperformancetime === '5 Year') {\n        SectorObject = data.RankI5YearPerformance;\n      } else if (this.sectorperformancetime === '10 Year') {\n        SectorObject = data.RankJ10YearPerformance;\n      } else {\n        SectorObject = data.RankFYeartoDateYTDPerformance;\n      }\n      // const temporaryKeys = Object.keys(data);\n      this.buildSectorObject(SectorObject);\n      // const tempObject = data;\n      // const newArray = this.createCryptoData(data, temporaryKeys);\n      // console.log(newArray);\n      this.stockresults = true;\n    },\n    async getForex() {\n      this.isLoading = true;\n      const payload = {\n        function: this.selectfxoption,\n        from_currency: this.firstfxcurrency,\n        to_currency: this.secondfxcurrency,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.selectdataoption = '';\n      this.selectfxoption = '';\n      this.firstfxcurrency = '';\n      this.secondfxcurrency = '';\n      this.MassageResponse(data);\n      this.stockresults = true;\n    },\n    async getCrypto() {\n      this.isLoading = true;\n      const payload = {\n        function: this.selectcryptooption,\n        from_currency: this.firstcryptocurrency,\n        to_currency: this.secondcryptocurrency,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.selectdataoption = '';\n      this.selectcryptooption = '';\n      this.firstcryptocurrency = '';\n      this.secondcryptocurrency = '';\n      this.MassageResponse(data);\n      this.stockresults = true;\n    },\n    async getTechIndicators() {\n      this.isLoading = true;\n      const payload = {\n        function: this.selecttechindicator,\n        symbol: this.selecttechindicatorsymbol,\n        time_period: this.selecttechindicatortimeperiod,\n        series_type: this.selecttechseriestype,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.stockname = this.selecttechindicatorsymbol;\n      this.selectdataoption = '';\n      this.selecttechindicatorsymbol = '';\n      this.selecttechindicatortimeperiod = '';\n      this.selecttechseriestype = '';\n      this.MassageResponse(data);\n      this.selecttechindicator = '';\n      this.stockresults = true;\n    },\n    massageMetaData(metaKeys, AlphaObject) {\n      let nSubKey = '';\n      this.alphaquotedata = [];\n      let fromStockName = '';\n      for (let tempKey = 0; tempKey < metaKeys.length; tempKey += 1) {\n        const nKey = metaKeys[tempKey].toString();\n        const al = AlphaObject.MetaData[nKey]; // Alias to shorten line 122\n        // replacingtimeKeys that have numbers or special characters\n        const mystring = nKey.split('.').join('');\n        nSubKey = mystring.replace(/[0-9]/g, ' ');\n        if (nSubKey === '  Symbol') {\n          this.stockname = al;\n        } else if (nSubKey === '  From Symbol' || nSubKey === '  To Symbol') { // For Forex Data\n          if (fromStockName !== '') {\n            this.stockname = `${fromStockName} to ${al} `;\n          } else {\n            fromStockName = al;\n          }\n        } else if (nSubKey === '  Digital Currency Code' || nSubKey === '  Market Code') { // For Forex Data\n          if (fromStockName !== '') {\n            this.stockname = `${fromStockName} to ${al} `;\n          } else {\n            fromStockName = al;\n          }\n        }\n      }\n    },\n    MassageResponse(AlphaObject) {\n      if (AlphaObject === 'Error') {\n        this.showerror = true;\n        return;\n      }\n      const StartingObject = AlphaObject;\n      const originalTimeKeys = Object.keys(StartingObject);\n      const [meta, time] = originalTimeKeys;\n      // eslint-disable-next-line\n      console.log(meta);\n      if (StartingObject.RealtimeCurrencyExchangeRate) {\n        // StartingObject.originalTimeKey = AlphaObject[time];\n        this.doCurrencyExchange(StartingObject.RealtimeCurrencyExchangeRate);\n        return;\n      }\n      const forexIndex = time.indexOf('TimeSeriesFX');\n      const cryptoIndex = time.indexOf('TimeSeriesDigitalCurrency');\n      const techIndex = time.indexOf('TechnicalAnalysis');\n      StartingObject.originalTimeKey = AlphaObject[time];\n      if (StartingObject.GlobalQuote) {\n        this.giveQuote(StartingObject.GlobalQuote);\n      } else if (techIndex !== -1) {\n        this.createTechIndicatorData(StartingObject, time, this.selecttechindicator);\n      } else {\n        const metaKeys = Object.keys(StartingObject.MetaData);\n        this.massageMetaData(metaKeys, StartingObject);\n        const timeKeys = Object.keys(StartingObject[time]);\n        let newSubKey = '';\n        for (let key = 0; key < timeKeys.length; key += 1) {\n          const tempArray = [];\n          const newKey = timeKeys[key].toString();\n          const subKeys = Object.keys(StartingObject.originalTimeKey[newKey]);\n          const a = StartingObject.originalTimeKey[newKey]; // Alias to shorten line 122\n          // replacing time keys that have numbers or special characters\n          for (let nKeys = 0; nKeys < subKeys.length; nKeys += 1) {\n            const mystring = subKeys[nKeys].split('.').join('');\n            newSubKey = mystring.replace(/[0-9]/g, ' ');\n            if (newSubKey !== subKeys[nKeys]) {\n              a[newSubKey] = a[subKeys[nKeys]];\n              delete a[subKeys[nKeys]];\n              tempArray.push(a[newSubKey]);\n            }\n          }\n          tempArray.push(newKey);\n          if (forexIndex !== -1) {\n            this.createForexData(tempArray);\n          } else if (cryptoIndex !== -1) {\n            this.createCryptoData(tempArray, timeKeys);\n          } else {\n            const newTimeObject = {\n              open: tempArray[0],\n              high: tempArray[1],\n              low: tempArray[2],\n              close: tempArray[3],\n              volume: tempArray[4],\n              date: tempArray[5],\n            };\n            // eslint-disable-next-line\n            console.log(newTimeObject);\n            if (Object.entries(newTimeObject).length !== 0) {\n              this.alphaData.TimeSeries.push(newTimeObject);\n            }\n          }\n        }\n      }\n    },\n    giveQuote(quote) {\n      const QuoteKeys = Object.keys(quote);\n      let tempArray = [];\n      tempArray = this.prepObject(quote, QuoteKeys);\n      const newObject = {\n        Symbol: tempArray[0],\n        Open: tempArray[1],\n        High: tempArray[2],\n        Low: tempArray[3],\n        Price: tempArray[4],\n        Volume: tempArray[5],\n        LatestTradingDay: tempArray[6],\n        PreviousClose: tempArray[7],\n        Change: tempArray[8],\n        ChangePercent: tempArray[9],\n      };\n      this.alphaquotedata = [];\n      if (Object.entries(newObject).length !== 0) {\n        this.alphaquotedata.push(newObject);\n      }\n    },\n    doCurrencyExchange(fxObject) {\n      const fxKeys = Object.keys(fxObject);\n      let tempArray = [];\n      tempArray = this.prepObject(fxObject, fxKeys);\n      const newForexObject = {\n        FromCurrency: tempArray[0],\n        ToCurrency: tempArray[2],\n        ExchangeRate: tempArray[4],\n        LastReportTime: tempArray[5],\n        BidPrice: tempArray[7],\n        BidAsk: tempArray[8],\n      };\n      if (Object.entries(newForexObject).length !== 0) {\n        this.alphafxcurrencydata.push(newForexObject);\n      }\n      this.stockname = `${newForexObject.FromCurrency} to ${newForexObject.ToCurrency} `;\n    },\n    createCryptoData(tempArray, timeKeys) {\n      const newCryptoObject = {\n        open: tempArray[0],\n        high: tempArray[2],\n        low: tempArray[4],\n        close: tempArray[6],\n        volume: tempArray[7],\n        market_cap: tempArray[8],\n        date: timeKeys[this.countcryptotimekeys],\n      };\n      this.countcryptotimekeys += 1;\n      if (Object.entries(newCryptoObject).length !== 0) {\n        this.alphaCryptoData.push(newCryptoObject);\n      }\n    },\n    createForexData(tempArray) {\n      const newForexObject = {\n        open: tempArray[0],\n        high: tempArray[1],\n        low: tempArray[2],\n        close: tempArray[3],\n        date: tempArray[4],\n      };\n      if (Object.entries(newForexObject).length !== 0) {\n        this.alphaForexData.push(newForexObject);\n      }\n    },\n    createTechIndicatorData(StartingObject, time, indicator) {\n      const timeKeys = Object.keys(StartingObject[time]);\n      let newSubKey = '';\n      // eslint-disable-next-line\n      console.log(indicator);\n      for (let key = 0; key < timeKeys.length; key += 1) {\n        const tempArray = [];\n        const newKey = timeKeys[key].toString();\n        const subKeys = Object.keys(StartingObject.originalTimeKey[newKey]);\n        const a = StartingObject.originalTimeKey[newKey]; // Alias to shorten line 122\n        // replacing time keys that have numbers or special characters\n        for (let nKeys = 0; nKeys < subKeys.length; nKeys += 1) {\n          const mystring = subKeys[nKeys].split('.').join('');\n          newSubKey = mystring.replace(/[0-9]/g, ' ');\n          a[newSubKey] = a[subKeys[nKeys]];\n          tempArray.push(a[newSubKey]);\n        }\n        tempArray.push(newSubKey);\n        tempArray.push(newKey);\n        const techObject = {\n          value: tempArray[0],\n          index: tempArray[1],\n          date: tempArray[2],\n        };\n        this.alphaTechData.push(techObject);\n      }\n    },\n    prepObject(newObject, tempKeys) {\n      const tempObject = newObject;\n      const tempArray = [];\n      for (let key = 0; key < tempKeys.length; key += 1) {\n        const newKey = tempKeys[key].toString();\n        const mystring = newKey.split('.').join('');\n        const newSubKey = mystring.replace(/[0-9]/g, ' ');\n        if (newSubKey !== newObject[key]) {\n          tempObject[newSubKey] = tempObject[newKey];\n          delete tempObject[newKey];\n          tempArray.push(tempObject[newSubKey]);\n          if (key === 0) {\n            this.stockname = tempObject[newSubKey];\n          }\n        }\n      }\n      return tempArray;\n    },\n    buildSectorObject(StartingObject) {\n      this.stockname = this.sectorperformancetime;\n      const timeKeys = Object.keys(StartingObject);\n      const tempArray = [];\n      for (let key = 0; key < timeKeys.length; key += 1) {\n        const newKey = timeKeys[key].toString();\n        tempArray.push(StartingObject[newKey]);\n        this.secheaders.push(timeKeys[key]);\n      }\n      const SecObject = {\n        comsserv: tempArray[0],\n        consdisc: tempArray[1],\n        consstaps: tempArray[2],\n        energy: tempArray[3],\n        financials: tempArray[4],\n        health: tempArray[5],\n        industrials: tempArray[6],\n        it: tempArray[7],\n        materials: tempArray[8],\n        real: tempArray[9],\n        utils: tempArray[10],\n      };\n      this.alphaSecData.push(SecObject);\n      this.sectorperformancetime = '';\n    },\n    cleardata() {\n      this.stockname = '';\n      this.stockresults = false;\n      if (this.alphadata.TimeSeries.length > 0) {\n        this.alphadata.TimeSeries = []; // To clear the Object\n        this.alphadata.TimeSeries.pop(); // To remove the empty object from the array\n      } else if (this.alphaquotedata.length > 0) {\n        this.alphaquotedata = [];\n        this.alphaquotedata.pop();\n      } else if (this.alphaForexData.length > 0) {\n        this.alphaForexData = [];\n        this.alphaquotedata.pop();\n      } else if (this.alphafxcurrencydata.length > 0) {\n        this.alphafxcurrencydata = [];\n        this.alphafxcurrencydata.pop();\n      } else if (this.alphaCryptoData.length > 0) {\n        this.alphaCryptoData = [];\n        this.alphaCryptoData.pop();\n        this.countcryptotimekeys = 0;\n      } else if (this.alphaTechData.length > 0) {\n        this.alphaTechData = [];\n        this.alphaTechData.pop();\n      } else if (this.alphaSecData.length > 0) {\n        this.alphaSecData = [];\n        this.alphaSecData.pop();\n      }\n      this.chartData = [['Date', 'High', 'Low']]; // Array of Arrays;\n    },\n    home() {\n      // this.$store.commit('ShowAlpha', false);\n      this.$router.push('/');\n    },\n    clearChart() {\n      this.chartData = [['Date', 'High', 'Low']];\n      this.showGraphs();\n    },\n    showGraphs() {\n      // eslint-disable-next-line\n      this.chartTitle = this.stockname;\n      this.showchart = true;\n      if (this.alphaData.TimeSeries.length > 0) {\n        for (let x = 0; x < this.alphaData.TimeSeries.length; x += 1) {\n          this.chartData.push([this.alphaData.TimeSeries[x].date,\n            Number(this.alphaData.TimeSeries[x].high), // Cast the string value to a number\n            Number(this.alphaData.TimeSeries[x].low)]); // Cast the string value to a number\n        }\n      } else if (this.alphaForexData.length > 0) {\n        for (let x = 0; x < this.alphaForexData.length; x += 1) {\n          this.chartData.push([this.alphaForexData[x].date,\n            Number(this.alphaForexData[x].high),\n            Number(this.alphaForexData[x].low)]);\n        }\n      } else if (this.alphaCryptoData.length > 0) {\n        for (let x = 0; x < this.alphaCryptoData.length; x += 1) {\n          this.chartData.push([this.alphaCryptoData[x].date,\n            Number(this.alphaCryptoData[x].high),\n            Number(this.alphaCryptoData[x].low)]);\n        }\n      } else {\n        this.chartTitle = 'This Data could not be displayed';\n      }\n    },\n    dummy(item) {\n      if (item === 'Graphs') {\n        this.showGraphs();\n      } else {\n        // eslint-disable-next-line\n        console.log(item);\n      }\n    },\n    CallSEC() {\n      this.$router.push('/sec');\n    },\n    CallAgriculture() {\n      this.$router.push('/agriculture');\n    },\n    CallEconomic() {\n      this.$router.push('/economic');\n    },\n    handleDrag({ target, transform }) {\n      // eslint-disable-next-line\n      console.log('onDrag left, top', transform);\n      target.style.transform = transform; // eslint-disable-line no-param-reassign\n    },\n    close() {\n      this.showchart = false;\n      this.chartData = [['Date', 'High', 'Low']]; // Array of Arrays;\n    },\n    closeError() {\n      this.showerror = false;\n      this.stockresults = false;\n    },\n  },\n  created() {\n    this.alphadata.TimeSeries = [];\n    this.alphaquotedata = [];\n  },\n};\n</script>\n"],"sourceRoot":"src/components"}]}