{"remainingRequest":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/babel-loader/lib/index.js!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/src/components/AlphaContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/src/components/AlphaContainer.vue","mtime":1583209656433},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AlphaContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container\">\n    <v-app-bar\n      app\n      color=\"black\"\n      dark\n      dense\n      >\n      <v-toolbar-title>Global Analytics -- AlphaVantage</v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-toolbar-title v-if=\"stockname\"> Current Commodity: {{ stockname }}</v-toolbar-title>\n      <template>\n        <v-menu offset-y v-if=\"stockname\">\n          <template v-slot:activator=\"{ on }\">\n            <v-btn small icon fab\n              :items=\"menuoptions\"\n              v-if=\"stockname\"\n              v-on=\"on\">\n              <v-icon>mdi-chevron-down</v-icon>\n            </v-btn>\n          </template>\n          <v-list>\n            <v-list-item\n              v-for=\"(item, index) in menuoptions\"\n              :key=\"index\"\n              @click=\"dummy(item)\"\n            >\n              <v-list-item-title>{{ item }}</v-list-item-title>\n            </v-list-item>\n          </v-list>\n        </v-menu>\n      </template>\n      <v-btn v-if=\"stockname\" @click=\"cleardata\" small icon fab>\n        <v-icon>mdi-plus</v-icon>\n      </v-btn>\n      <v-spacer></v-spacer>\n      <v-btn @click=\"dummy('Agricultural')\">\n        Agricultural\n      </v-btn>\n      <v-btn @click=\"dummy('Economic')\">\n        Economic\n      </v-btn>\n      <v-btn @click=\"dummy('Weather')\">\n        Weather\n      </v-btn>\n      <v-btn @click=\"home\">\n        Home\n      </v-btn>\n    </v-app-bar>\n    <br><br>\n    <template name=\"formcomponent\">\n      <v-combobox\n        v-if=\"!stockresults\"\n        v-model=\"selectdataoption\"\n        :items=\"alphadataoptions\"\n        label=\"Select an alphadata function\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectdataoption==='Stock Time Series'\"\n        v-model=\"selectstockoption\"\n        :items=\"alphastockoptions\"\n        label=\"Select a time series option\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectstockoption!==''\"\n        v-model=\"selectstock\"\n        :items=\"alphabluechipstocks\"\n        label=\"Select a bluechip or type in your own\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectdataoption==='Forex'\"\n        v-model=\"selectfxoption\"\n        :items=\"alphafxoptions\"\n        label=\"Select a forex option\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectdataoption==='Crypto'\"\n        v-model=\"selectcryptooption\"\n        :items=\"alphacryptooptions\"\n        label=\"Select a crypto option\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectcryptooption!=''\"\n        v-model=\"firstcryptocurrency\"\n        :items=\"alphacryptocurrencies\"\n        label=\"Select a currency to convert from\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"firstcryptocurrency!=''\"\n        v-model=\"secondcryptocurrency\"\n        :items=\"alphafxcurrencies\"\n        label=\"Select a currency to convert to\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectfxoption!=''\"\n        v-model=\"firstfxcurrency\"\n        :items=\"alphafxcurrencies\"\n        label=\"Select a currency to convert from\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"firstfxcurrency!=''\"\n        v-model=\"secondfxcurrency\"\n        :items=\"alphafxcurrencies\"\n        label=\"Select a currency to convert to\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-btn color=\"primary\" v-if=\"selectstock!==''\" @click=\"getTimeSeries\">\n        Query Stock Data\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"secondfxcurrency!==''\" @click=\"getForex\">\n        Query Forex Data\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"secondcryptocurrency!==''\" @click=\"getCrypto\">\n        Query Crypto Data\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"selectdataoption ==='Sector Performance'\" @click=\"getSecPer\">\n        Query Sector Performance\n      </v-btn>\n    </template>\n    <template v-if=\"alphadata.TimeSeries.length > 1\">\n      <v-data-table\n        :headers=\"headers\"\n        :items=\"alphadata.TimeSeries\"\n        class=\"elevation-1\"\n      >\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaquotedata.length > 1\">\n      <v-data-table\n        :headers=\"quoteheaders\"\n        :items=\"alphaquotedata\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaForexData.length > 1\">\n      <v-data-table\n        :headers=\"forexheaders\"\n        :items=\"alphaForexData\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphafxcurrencydata.length > 1\">\n      <v-data-table\n        :headers=\"alphafxcurrencyheader\"\n        :items=\"alphafxcurrencydata\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaCryptoData.length > 1\">\n      <v-data-table\n        :headers=\"cryptoheaders\"\n        :items=\"alphaCryptoData\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n  </div>\n</template>\n\n<script>\nimport RepositoryFactory from '../repositories/RepositoryFactory';\nimport store from '../store';\n\nconst PostsRepository = RepositoryFactory.get('posts');\nexport default {\n  store,\n  data() {\n    return {\n      alphaquotedata: [{}],\n      quoteheaders: [{ text: 'Symbol', value: 'Symbol' }, { text: 'Open', value: 'Open' }, { text: 'High', value: 'High' }, { text: 'Low', value: 'Low' }, { text: 'Price', value: 'Price' }, { text: 'Volume', value: 'Volume' }, { text: 'Latest Trading Day', value: 'LatestTradingDay' }, { text: 'Previous Close', value: 'PreviousClose' }, { text: 'Change', value: 'Change' }, { text: 'Change Percent', value: 'ChangePercent' }],\n      alphadata: {\n        MetaData: [{}],\n        TimeSeries: [{}],\n      },\n      headers: [{ text: 'Open', value: 'open' }, { text: 'Close', value: 'close' }, { text: 'High', value: 'high' }, { text: 'Low', value: 'low' }, { text: 'Volume', value: 'volume' }, { text: 'Date (Eastern)', value: 'date' }],\n      subheaders: [],\n      forexheaders: [{ text: 'Open', value: 'open' }, { text: 'Close', value: 'close' }, { text: 'High', value: 'high' }, { text: 'Low', value: 'low' }, { text: 'Date (UTC)', value: 'date' }],\n      alphaForexData: [{}],\n      cryptoheaders: [{ text: 'Open', value: 'open' }, { text: 'Close', value: 'close' }, { text: 'High', value: 'high' }, { text: 'Low', value: 'low' }, { text: 'Volume', value: 'volume' }, { text: 'Market Cap', value: 'market_cap' }, { text: 'Date', value: 'date' }],\n      alphaCryptoData: [{}],\n      drawer: false,\n      stockname: '',\n      menuoptions: ['Analyze', 'Metrics', 'Graphs'],\n      selectdataoption: '',\n      alphadataoptions: ['Stock Time Series', 'Forex', 'Crypto', 'Tech Indicators', 'Sector Performance'],\n      alphastockoptions: ['Intraday', 'Daily', 'Weekly', 'Monthly', 'Quote'],\n      alphabluechipstocks: ['AAPL', 'MSFT', 'AMZN', 'GOOG', 'FB'],\n      alphafxoptions: ['Currency Exchange Rate', 'Intraday', 'Daily', 'Weekly', 'Monthly'],\n      alphafxcurrencies: ['USD', 'EUR', 'CAD', 'CHF', 'CNY', 'DKK', 'GBP', 'INR', 'JPY', 'RUB'],\n      alphacryptocurrencies: ['BTC', 'ETH'],\n      alphacryptooptions: ['Currency Exchange Rate', 'Crypto Daily', 'Crypto Weekly', 'Crypto Monthly'],\n      selectcryptooption: '',\n      firstcryptocurrency: '',\n      secondcryptocurrency: '',\n      selectfxoption: '',\n      firstfxcurrency: '',\n      secondfxcurrency: '',\n      alphafxcurrencydata: [{}],\n      alphafxcurrencyheader: [{ text: 'From Currency', value: 'FromCurrency' }, { text: 'To Currency', value: 'ToCurrency' }, { text: 'Exchange Rate', value: 'ExchangeRate' }, { text: 'Last Report Time (UTC)', value: 'LastReportTime' }, { text: 'Bid Price', value: 'BidPrice' }, { text: 'Bid Ask', value: 'BidAsk' }],\n      selectstockoption: '',\n      selectstock: '',\n      searchparameters: '',\n      stockresults: false,\n      countcryptotimekeys: 0,\n    };\n  },\n  computed: {\n    alphaData() {\n      return this.$data.alphadata;\n    },\n  },\n  methods: {\n    async getTimeSeries() {\n      // this.isLoading = true;\n      const payload = {\n        dataoption: this.selectdataoption,\n        stockoption: this.selectstockoption,\n        stock: this.selectstock,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      // this.searchparameters = this.selectdataoption + ' / ' + this.selectstockoption;\n      this.selectdataoption = '';\n      this.selectstock = '';\n      this.selectstockoption = '';\n      this.MassageResponse(data);\n      this.stockresults = true;\n    },\n    async getSecPer() {\n      const payload = {\n        function: 'Sector',\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.selectdataoption = '';\n      const temporaryKeys = Object.keys(data);\n      // const tempObject = data;\n      this.prepObject(data, temporaryKeys);\n      this.stockresults = true;\n    },\n    async getForex() {\n      this.isLoading = true;\n      const payload = {\n        function: this.selectfxoption,\n        from_currency: this.firstfxcurrency,\n        to_currency: this.secondfxcurrency,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.selectdataoption = '';\n      this.selectfxoption = '';\n      this.firstfxcurrency = '';\n      this.secondfxcurrency = '';\n      this.MassageResponse(data);\n      this.stockresults = true;\n    },\n    async getCrypto() {\n      this.isLoading = true;\n      const payload = {\n        function: this.selectcryptooption,\n        from_currency: this.firstcryptocurrency,\n        to_currency: this.secondcryptocurrency,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.selectdataoption = '';\n      this.selectcryptooption = '';\n      this.firstcryptocurrency = '';\n      this.secondcryptocurrency = '';\n      this.MassageResponse(data);\n      this.stockresults = true;\n    },\n    massageMetaData(metaKeys, AlphaObject) {\n      let nSubKey = '';\n      this.alphaquotedata = [{}];\n      let fromStockName = '';\n      for (let tempKey = 0; tempKey < metaKeys.length; tempKey += 1) {\n        const nKey = metaKeys[tempKey].toString();\n        const al = AlphaObject.MetaData[nKey]; // Alias to shorten line 122\n        // replacingtimeKeys that have numbers or special characters\n        const mystring = nKey.split('.').join('');\n        nSubKey = mystring.replace(/[0-9]/g, ' ');\n        if (nSubKey === '  Symbol') {\n          this.stockname = al;\n        } else if (nSubKey === '  From Symbol' || nSubKey === '  To Symbol') { // For Forex Data\n          if (fromStockName !== '') {\n            this.stockname = `${fromStockName} to ${al} `;\n          } else {\n            fromStockName = al;\n          }\n        } else if (nSubKey === '  Digital Currency Code' || nSubKey === '  Market Code') { // For Forex Data\n          if (fromStockName !== '') {\n            this.stockname = `${fromStockName} to ${al} `;\n          } else {\n            fromStockName = al;\n          }\n        }\n      }\n    },\n    MassageResponse(AlphaObject) {\n      const StartingObject = AlphaObject;\n      if (StartingObject.RealtimeCurrencyExchangeRate) {\n        this.doCurrencyExchange(StartingObject.RealtimeCurrencyExchangeRate);\n      } else if (StartingObject.GlobalQuote) {\n        this.giveQuote(StartingObject.GlobalQuote);\n      } else {\n        const metaKeys = Object.keys(StartingObject.MetaData);\n        this.massageMetaData(metaKeys, StartingObject);\n        const originalTimeKeys = Object.keys(StartingObject);\n        const [meta, time] = originalTimeKeys;\n        const forexIndex = time.indexOf('TimeSeriesFX');\n        const cryptoIndex = time.indexOf('TimeSeriesDigitalCurrency');\n        console.log(meta);\n        const timeKeys = Object.keys(StartingObject[time]);\n        StartingObject.originalTimeKey = AlphaObject[time];\n        let newSubKey = '';\n        for (let key = 0; key < timeKeys.length; key += 1) {\n          const tempArray = [];\n          const newKey = timeKeys[key].toString();\n          const subKeys = Object.keys(StartingObject.originalTimeKey[newKey]);\n          const a = StartingObject.originalTimeKey[newKey]; // Alias to shorten line 122\n          // replacing time keys that have numbers or special characters\n          for (let nKeys = 0; nKeys < subKeys.length; nKeys += 1) {\n            const mystring = subKeys[nKeys].split('.').join('');\n            newSubKey = mystring.replace(/[0-9]/g, ' ');\n            if (newSubKey !== subKeys[nKeys]) {\n              a[newSubKey] = a[subKeys[nKeys]];\n              delete a[subKeys[nKeys]];\n              tempArray.push(a[newSubKey]);\n            }\n          }\n          tempArray.push(newKey);\n          if (forexIndex !== -1) {\n            this.createForexData(tempArray);\n          } else if (cryptoIndex !== -1) {\n            this.createCryptoData(tempArray, timeKeys);\n          } else {\n            const newTimeObject = {\n              open: tempArray[0],\n              high: tempArray[1],\n              low: tempArray[2],\n              close: tempArray[3],\n              volume: tempArray[4],\n              date: tempArray[5],\n            };\n            console.log(newTimeObject);\n            if (Object.entries(newTimeObject).length !== 0) {\n              this.alphaData.TimeSeries.push(newTimeObject);\n            }\n          }\n        }\n      }\n    },\n    giveQuote(quote) {\n      const QuoteKeys = Object.keys(quote);\n      let tempArray = [];\n      tempArray = this.prepObject(quote, QuoteKeys);\n      const newObject = {\n        Symbol: tempArray[0],\n        Open: tempArray[1],\n        High: tempArray[2],\n        Low: tempArray[3],\n        Price: tempArray[4],\n        Volume: tempArray[5],\n        LatestTradingDay: tempArray[6],\n        PreviousClose: tempArray[7],\n        Change: tempArray[8],\n        ChangePercent: tempArray[9],\n      };\n      this.alphaquotedata = [{}];\n      if (Object.entries(newObject).length !== 0) {\n        this.alphaquotedata.push(newObject);\n      }\n    },\n    doCurrencyExchange(fxObject) {\n      const fxKeys = Object.keys(fxObject);\n      let tempArray = [];\n      tempArray = this.prepObject(fxObject, fxKeys);\n      const newForexObject = {\n        FromCurrency: tempArray[0],\n        ToCurrency: tempArray[2],\n        ExchangeRate: tempArray[4],\n        LastReportTime: tempArray[5],\n        BidPrice: tempArray[7],\n        BidAsk: tempArray[8],\n      };\n      if (Object.entries(newForexObject).length !== 0) {\n        this.alphafxcurrencydata.push(newForexObject);\n      }\n      this.stockname = `${newForexObject.FromCurrency} to ${newForexObject.ToCurrency} `;\n    },\n    createCryptoData(tempArray, timeKeys) {\n      const newCryptoObject = {\n        open: tempArray[0],\n        high: tempArray[2],\n        low: tempArray[4],\n        close: tempArray[6],\n        volume: tempArray[7],\n        market_cap: tempArray[8],\n        date: timeKeys[this.countcryptotimekeys],\n      };\n      this.countcryptotimekeys += 1;\n      if (Object.entries(newCryptoObject).length !== 0) {\n        this.alphaCryptoData.push(newCryptoObject);\n      }\n    },\n    createForexData(tempArray) {\n      const newForexObject = {\n        open: tempArray[0],\n        high: tempArray[1],\n        low: tempArray[2],\n        close: tempArray[3],\n        date: tempArray[4],\n      };\n      if (Object.entries(newForexObject).length !== 0) {\n        this.alphaForexData.push(newForexObject);\n      }\n    },\n    home() {\n      // this.$store.commit('ShowAlpha', false);\n      this.$router.push('/');\n    },\n    dummy(item) {\n      console.log(item);\n    },\n    cleardata() {\n      this.stockname = '';\n      this.stockresults = false;\n      if (this.alphadata.TimeSeries.length > 1) {\n        this.alphadata.TimeSeries = [{}]; // To clear the Object\n        this.alphadata.TimeSeries.pop(); // To remove the empty object from the array\n      } else if (this.alphaquotedata.length > 1) {\n        this.alphaquotedata = [{}];\n        this.alphaquotedata.pop();\n      } else if (this.alphaForexData.length > 1) {\n        this.alphaForexData = [{}];\n        this.alphaquotedata.pop();\n      } else if (this.alphafxcurrencydata.length > 1) {\n        this.alphafxcurrencydata = [{}];\n        this.alphafxcurrencydata.pop();\n      } else if (this.alphaCryptoData.length > 1) {\n        this.alphaCryptoData = [{}];\n        this.alphaCryptoData.pop();\n        this.countcryptotimekeys = 0;\n      }\n    },\n    prepObject(newObject, tempKeys) {\n      const tempObject = newObject;\n      const tempArray = [];\n      for (let key = 0; key < tempKeys.length; key += 1) {\n        const newKey = tempKeys[key].toString();\n        const mystring = newKey.split('.').join('');\n        const newSubKey = mystring.replace(/[0-9]/g, ' ');\n        if (newSubKey !== newObject[key]) {\n          tempObject[newSubKey] = tempObject[newKey];\n          delete tempObject[newKey];\n          tempArray.push(tempObject[newSubKey]);\n          if (key === 0) {\n            this.stockname = tempObject[newSubKey];\n          }\n        }\n      }\n      return tempArray;\n    },\n  },\n  created() {\n    this.alphadata.TimeSeries = [];\n    this.alphaquotedata = [{}];\n  },\n};\n</script>\n"],"sourceRoot":"src/components"}]}