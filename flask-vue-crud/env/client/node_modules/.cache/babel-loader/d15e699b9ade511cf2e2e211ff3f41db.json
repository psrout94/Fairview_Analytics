{"remainingRequest":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/babel-loader/lib/index.js!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pstout/fairview_analytics/flask-vue-crud/env/client/src/components/AlphaContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/src/components/AlphaContainer.vue","mtime":1584312664954},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pstout/fairview_analytics/flask-vue-crud/env/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdCI7CmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tICIvVXNlcnMvcHN0b3V0L2ZhaXJ2aWV3X2FuYWx5dGljcy9mbGFzay12dWUtY3J1ZC9lbnYvY2xpZW50L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5IjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL3BzdG91dC9mYWlydmlld19hbmFseXRpY3MvZmxhc2stdnVlLWNydWQvZW52L2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBUcmFkaW5nVnVlIGZyb20gJ3RyYWRpbmctdnVlLWpzJzsKaW1wb3J0IE1vbnRobHlEYXRhIGZyb20gJy4vY2hhcnRzL0NvbW1pdENoYXJ0LnZ1ZSc7CmltcG9ydCBSZXBvc2l0b3J5RmFjdG9yeSBmcm9tICcuLi9yZXBvc2l0b3JpZXMvUmVwb3NpdG9yeUZhY3RvcnknOwppbXBvcnQgc3RvcmUgZnJvbSAnLi4vc3RvcmUnOwp2YXIgUG9zdHNSZXBvc2l0b3J5ID0gUmVwb3NpdG9yeUZhY3RvcnkuZ2V0KCdwb3N0cycpOwpleHBvcnQgZGVmYXVsdCB7CiAgc3RvcmU6IHN0b3JlLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjb21wb25lbnRzOiB7CiAgICAgICAgTW9udGhseURhdGE6IE1vbnRobHlEYXRhLAogICAgICAgIFRyYWRpbmdWdWU6IFRyYWRpbmdWdWUKICAgICAgfSwKICAgICAgYWxwaGFTZWNEYXRhOiBbXSwKICAgICAgc2VjaGVhZGVyczogW3sKICAgICAgICB0ZXh0OiAnQ29tbXVuaWNhdGlvbiBTZXJ2aWNlcycsCiAgICAgICAgdmFsdWU6ICdjb21zc2VydicKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdDb25zdW1lciBEaXNjcmV0aW9uYXJ5JywKICAgICAgICB2YWx1ZTogJ2NvbnNkaXNjJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0NvbnN1bWVyIFN0YXBsZXMnLAogICAgICAgIHZhbHVlOiAnY29uc3N0YXBzJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0VuZXJneScsCiAgICAgICAgdmFsdWU6ICdlbmVyZ3knCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiAnRmluYW5jaWFscycsCiAgICAgICAgdmFsdWU6ICdmaW5hbmNpYWxzJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0hlYWx0aCBDYXJlJywKICAgICAgICB2YWx1ZTogJ2hlYWx0aCcKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdJbmR1c3RyaWFscycsCiAgICAgICAgdmFsdWU6ICdpbmR1c3RyaWFscycKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdJVCcsCiAgICAgICAgdmFsdWU6ICdpdCcKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdNYXRlcmlhbHMnLAogICAgICAgIHZhbHVlOiAnbWF0ZXJpYWxzJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ1JlYWwgRXN0YXRlJywKICAgICAgICB2YWx1ZTogJ3JlYWwnCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiAnVXRpbGl0aWVzJywKICAgICAgICB2YWx1ZTogJ3V0aWxzJwogICAgICB9XSwKICAgICAgc2VjdG9ycGVyZm9ybWFuY2V0aW1lOiAnJywKICAgICAgYWxwaGFzZWN0b3JwZXJmb3JtYW5jZXRpbWU6IFsnUmVhbCBUaW1lJywgJzEgRGF5JywgJzUgRGF5JywgJzEgTW9udGgnLCAnMyBNb250aCcsICdGaXNjYWwgWWVhcicsICcxIFllYXInLCAnMyBZZWFyJywgJzUgWWVhcicsICcxMCBZZWFyJ10sCiAgICAgIHRlY2hoZWFkZXJzOiBbewogICAgICAgIHRleHQ6ICdWYWx1ZScsCiAgICAgICAgdmFsdWU6ICd2YWx1ZScKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdJbmRleCcsCiAgICAgICAgdmFsdWU6ICdpbmRleCcKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdEYXRlJywKICAgICAgICB2YWx1ZTogJ2RhdGUnCiAgICAgIH1dLAogICAgICBhbHBoYVRlY2hEYXRhOiBbXSwKICAgICAgYWxwaGFxdW90ZWRhdGE6IFtdLAogICAgICBxdW90ZWhlYWRlcnM6IFt7CiAgICAgICAgdGV4dDogJ1N5bWJvbCcsCiAgICAgICAgdmFsdWU6ICdTeW1ib2wnCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiAnT3BlbicsCiAgICAgICAgdmFsdWU6ICdPcGVuJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0hpZ2gnLAogICAgICAgIHZhbHVlOiAnSGlnaCcKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdMb3cnLAogICAgICAgIHZhbHVlOiAnTG93JwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ1ByaWNlJywKICAgICAgICB2YWx1ZTogJ1ByaWNlJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ1ZvbHVtZScsCiAgICAgICAgdmFsdWU6ICdWb2x1bWUnCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiAnTGF0ZXN0IFRyYWRpbmcgRGF5JywKICAgICAgICB2YWx1ZTogJ0xhdGVzdFRyYWRpbmdEYXknCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiAnUHJldmlvdXMgQ2xvc2UnLAogICAgICAgIHZhbHVlOiAnUHJldmlvdXNDbG9zZScKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdDaGFuZ2UnLAogICAgICAgIHZhbHVlOiAnQ2hhbmdlJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0NoYW5nZSBQZXJjZW50JywKICAgICAgICB2YWx1ZTogJ0NoYW5nZVBlcmNlbnQnCiAgICAgIH1dLAogICAgICBhbHBoYWRhdGE6IHsKICAgICAgICBNZXRhRGF0YTogW10sCiAgICAgICAgVGltZVNlcmllczogW10KICAgICAgfSwKICAgICAgaGVhZGVyczogW3sKICAgICAgICB0ZXh0OiAnT3BlbicsCiAgICAgICAgdmFsdWU6ICdvcGVuJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0Nsb3NlJywKICAgICAgICB2YWx1ZTogJ2Nsb3NlJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0hpZ2gnLAogICAgICAgIHZhbHVlOiAnaGlnaCcKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdMb3cnLAogICAgICAgIHZhbHVlOiAnbG93JwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ1ZvbHVtZScsCiAgICAgICAgdmFsdWU6ICd2b2x1bWUnCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiAnRGF0ZSAoRWFzdGVybiknLAogICAgICAgIHZhbHVlOiAnZGF0ZScKICAgICAgfV0sCiAgICAgIHN1YmhlYWRlcnM6IFtdLAogICAgICBmb3JleGhlYWRlcnM6IFt7CiAgICAgICAgdGV4dDogJ09wZW4nLAogICAgICAgIHZhbHVlOiAnb3BlbicKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdDbG9zZScsCiAgICAgICAgdmFsdWU6ICdjbG9zZScKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdIaWdoJywKICAgICAgICB2YWx1ZTogJ2hpZ2gnCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiAnTG93JywKICAgICAgICB2YWx1ZTogJ2xvdycKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdEYXRlIChVVEMpJywKICAgICAgICB2YWx1ZTogJ2RhdGUnCiAgICAgIH1dLAogICAgICBhbHBoYUZvcmV4RGF0YTogW10sCiAgICAgIGNyeXB0b2hlYWRlcnM6IFt7CiAgICAgICAgdGV4dDogJ09wZW4nLAogICAgICAgIHZhbHVlOiAnb3BlbicKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdDbG9zZScsCiAgICAgICAgdmFsdWU6ICdjbG9zZScKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdIaWdoJywKICAgICAgICB2YWx1ZTogJ2hpZ2gnCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiAnTG93JywKICAgICAgICB2YWx1ZTogJ2xvdycKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdWb2x1bWUnLAogICAgICAgIHZhbHVlOiAndm9sdW1lJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ01hcmtldCBDYXAnLAogICAgICAgIHZhbHVlOiAnbWFya2V0X2NhcCcKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdEYXRlJywKICAgICAgICB2YWx1ZTogJ2RhdGUnCiAgICAgIH1dLAogICAgICBhbHBoYUNyeXB0b0RhdGE6IFtdLAogICAgICBkcmF3ZXI6IGZhbHNlLAogICAgICBzdG9ja25hbWU6ICcnLAogICAgICBtZW51b3B0aW9uczogWydBbmFseXplJywgJ01ldHJpY3MnLCAnR3JhcGhzJ10sCiAgICAgIHNlbGVjdGRhdGFvcHRpb246ICcnLAogICAgICBhbHBoYWRhdGFvcHRpb25zOiBbJ1N0b2NrIFRpbWUgU2VyaWVzJywgJ0ZvcmV4JywgJ0NyeXB0bycsICdUZWNoIEluZGljYXRvcnMnLCAnU2VjdG9yIFBlcmZvcm1hbmNlJ10sCiAgICAgIGFscGhhc3RvY2tvcHRpb25zOiBbJ0ludHJhZGF5JywgJ0RhaWx5JywgJ1dlZWtseScsICdNb250aGx5JywgJ1F1b3RlJ10sCiAgICAgIGFscGhhYmx1ZWNoaXBzdG9ja3M6IFsnQUFQTCcsICdNU0ZUJywgJ0FNWk4nLCAnR09PRycsICdGQiddLAogICAgICBhbHBoYWZ4b3B0aW9uczogWydDdXJyZW5jeSBFeGNoYW5nZSBSYXRlJywgJ0ludHJhZGF5JywgJ0RhaWx5JywgJ1dlZWtseScsICdNb250aGx5J10sCiAgICAgIGFscGhhZnhjdXJyZW5jaWVzOiBbJ1VTRCcsICdFVVInLCAnQ0FEJywgJ0NIRicsICdDTlknLCAnREtLJywgJ0dCUCcsICdJTlInLCAnSlBZJywgJ1JVQiddLAogICAgICBhbHBoYWNyeXB0b2N1cnJlbmNpZXM6IFsnQlRDJywgJ0VUSCddLAogICAgICBhbHBoYWNyeXB0b29wdGlvbnM6IFsnQ3VycmVuY3kgRXhjaGFuZ2UgUmF0ZScsICdDcnlwdG8gRGFpbHknLCAnQ3J5cHRvIFdlZWtseScsICdDcnlwdG8gTW9udGhseSddLAogICAgICBhbHBoYXRlY2hpbmRpY2F0b3JzOiBbJ1NNQScsICdFTUEnLCAnTUFDRCcsICdTVE9DSCcsICdSU0knLCAnQURYJywgJ0NDSScsICdBUk9PTicsICdCQkFORFMnLCAnQUQnLCAnT0JWJ10sCiAgICAgIGFscGhhdGVjaHNlcmllc3R5cGU6IFsnSGlnaCcsICdMb3cnLCAnQ2xvc2UnLCAnT3BlbiddLAogICAgICBzZWxlY3R0ZWNoc2VyaWVzdHlwZTogJycsCiAgICAgIHNlbGVjdHRlY2hpbmRpY2F0b3I6ICcnLAogICAgICBzZWxlY3RjcnlwdG9vcHRpb246ICcnLAogICAgICBmaXJzdGNyeXB0b2N1cnJlbmN5OiAnJywKICAgICAgc2Vjb25kY3J5cHRvY3VycmVuY3k6ICcnLAogICAgICBzZWxlY3RmeG9wdGlvbjogJycsCiAgICAgIGZpcnN0ZnhjdXJyZW5jeTogJycsCiAgICAgIHNlY29uZGZ4Y3VycmVuY3k6ICcnLAogICAgICBhbHBoYWZ4Y3VycmVuY3lkYXRhOiBbXSwKICAgICAgYWxwaGFmeGN1cnJlbmN5aGVhZGVyOiBbewogICAgICAgIHRleHQ6ICdGcm9tIEN1cnJlbmN5JywKICAgICAgICB2YWx1ZTogJ0Zyb21DdXJyZW5jeScKICAgICAgfSwgewogICAgICAgIHRleHQ6ICdUbyBDdXJyZW5jeScsCiAgICAgICAgdmFsdWU6ICdUb0N1cnJlbmN5JwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0V4Y2hhbmdlIFJhdGUnLAogICAgICAgIHZhbHVlOiAnRXhjaGFuZ2VSYXRlJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0xhc3QgUmVwb3J0IFRpbWUgKFVUQyknLAogICAgICAgIHZhbHVlOiAnTGFzdFJlcG9ydFRpbWUnCiAgICAgIH0sIHsKICAgICAgICB0ZXh0OiAnQmlkIFByaWNlJywKICAgICAgICB2YWx1ZTogJ0JpZFByaWNlJwogICAgICB9LCB7CiAgICAgICAgdGV4dDogJ0JpZCBBc2snLAogICAgICAgIHZhbHVlOiAnQmlkQXNrJwogICAgICB9XSwKICAgICAgc2VsZWN0c3RvY2tvcHRpb246ICcnLAogICAgICBzZWxlY3RzdG9jazogJycsCiAgICAgIHNlYXJjaHBhcmFtZXRlcnM6ICcnLAogICAgICBzdG9ja3Jlc3VsdHM6IGZhbHNlLAogICAgICBjb3VudGNyeXB0b3RpbWVrZXlzOiAwLAogICAgICBhbHBoYXRlY2hpbmRpY2F0b3JzeW1ib2xzOiBbJ0ZCJywgJ01TRlQnLCAnQUFQTCcsICdBTVpOJywgJ0dPT0cnXSwKICAgICAgc2VsZWN0dGVjaGluZGljYXRvcnN5bWJvbDogJycsCiAgICAgIGFscGhhdGVjaGluZGljYXRvcnRpbWVwZXJpb2Q6IFsnMTAnLCAnMjAnLCAnNTAnLCAnMTAwJywgJzIwMCddLAogICAgICBzZWxlY3R0ZWNoaW5kaWNhdG9ydGltZXBlcmlvZDogJycsCiAgICAgIGFuYWx5emVkYXRhOiBmYWxzZQogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICBhbHBoYURhdGE6IGZ1bmN0aW9uIGFscGhhRGF0YSgpIHsKICAgICAgcmV0dXJuIHRoaXMuJGRhdGEuYWxwaGFkYXRhOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZ2V0VGltZVNlcmllczogZnVuY3Rpb24gZ2V0VGltZVNlcmllcygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBwYXlsb2FkLCBfcmVmLCBkYXRhOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAvLyB0aGlzLmlzTG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICBwYXlsb2FkID0gewogICAgICAgICAgICAgICAgICBkYXRhb3B0aW9uOiBfdGhpcy5zZWxlY3RkYXRhb3B0aW9uLAogICAgICAgICAgICAgICAgICBzdG9ja29wdGlvbjogX3RoaXMuc2VsZWN0c3RvY2tvcHRpb24sCiAgICAgICAgICAgICAgICAgIHN0b2NrOiBfdGhpcy5zZWxlY3RzdG9jawogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIFBvc3RzUmVwb3NpdG9yeS5wb3N0QWxwaGEocGF5bG9hZCk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF9yZWYgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IF9yZWYuZGF0YTsKICAgICAgICAgICAgICAgIC8vIHRoaXMuc2VhcmNocGFyYW1ldGVycyA9IHRoaXMuc2VsZWN0ZGF0YW9wdGlvbiArICcgLyAnICsgdGhpcy5zZWxlY3RzdG9ja29wdGlvbjsKICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdGRhdGFvcHRpb24gPSAnJzsKICAgICAgICAgICAgICAgIF90aGlzLnNlbGVjdHN0b2NrID0gJyc7CiAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RzdG9ja29wdGlvbiA9ICcnOwoKICAgICAgICAgICAgICAgIF90aGlzLk1hc3NhZ2VSZXNwb25zZShkYXRhKTsKCiAgICAgICAgICAgICAgICBfdGhpcy5zdG9ja3Jlc3VsdHMgPSB0cnVlOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGdldFNlY1BlcjogZnVuY3Rpb24gZ2V0U2VjUGVyKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgcGF5bG9hZCwgX3JlZjIsIGRhdGEsIFNlY3Rvck9iamVjdDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHBheWxvYWQgPSB7CiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uOiAnU2VjdG9yJwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBQb3N0c1JlcG9zaXRvcnkucG9zdEFscGhhKHBheWxvYWQpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfcmVmMiA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IF9yZWYyLmRhdGE7CiAgICAgICAgICAgICAgICBfdGhpczIuc2VsZWN0ZGF0YW9wdGlvbiA9ICcnOwogICAgICAgICAgICAgICAgU2VjdG9yT2JqZWN0ID0ge307CgogICAgICAgICAgICAgICAgaWYgKF90aGlzMi5zZWN0b3JwZXJmb3JtYW5jZXRpbWUgPT09ICdSZWFsIFRpbWUnKSB7CiAgICAgICAgICAgICAgICAgIFNlY3Rvck9iamVjdCA9IGRhdGEuUmFua0FSZWFsVGltZVBlcmZvcm1hbmNlOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpczIuc2VjdG9ycGVyZm9ybWFuY2V0aW1lID09PSAnMSBEYXknKSB7CiAgICAgICAgICAgICAgICAgIFNlY3Rvck9iamVjdCA9IGRhdGEuUmFua0IxRGF5UGVyZm9ybWFuY2U7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzMi5zZWN0b3JwZXJmb3JtYW5jZXRpbWUgPT09ICc1IERheScpIHsKICAgICAgICAgICAgICAgICAgU2VjdG9yT2JqZWN0ID0gZGF0YS5SYW5rQzVEYXlQZXJmb3JtYW5jZTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMyLnNlY3RvcnBlcmZvcm1hbmNldGltZSA9PT0gJzEgTW9udGgnKSB7CiAgICAgICAgICAgICAgICAgIFNlY3Rvck9iamVjdCA9IGRhdGEuUmFua0QxTW9udGhQZXJmb3JtYW5jZTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMyLnNlY3RvcnBlcmZvcm1hbmNldGltZSA9PT0gJzMgTW9udGgnKSB7CiAgICAgICAgICAgICAgICAgIFNlY3Rvck9iamVjdCA9IGRhdGEuUmFua0UzTW9udGhQZXJmb3JtYW5jZTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMyLnNlY3RvcnBlcmZvcm1hbmNldGltZSA9PT0gJzEgWWVhcicpIHsKICAgICAgICAgICAgICAgICAgU2VjdG9yT2JqZWN0ID0gZGF0YS5SYW5rRzFZZWFyUGVyZm9ybWFuY2U7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF90aGlzMi5zZWN0b3JwZXJmb3JtYW5jZXRpbWUgPT09ICczIFllYXInKSB7CiAgICAgICAgICAgICAgICAgIFNlY3Rvck9iamVjdCA9IGRhdGEuUmFua0gzWWVhclBlcmZvcm1hbmNlOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpczIuc2VjdG9ycGVyZm9ybWFuY2V0aW1lID09PSAnNSBZZWFyJykgewogICAgICAgICAgICAgICAgICBTZWN0b3JPYmplY3QgPSBkYXRhLlJhbmtJNVllYXJQZXJmb3JtYW5jZTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMyLnNlY3RvcnBlcmZvcm1hbmNldGltZSA9PT0gJzEwIFllYXInKSB7CiAgICAgICAgICAgICAgICAgIFNlY3Rvck9iamVjdCA9IGRhdGEuUmFua0oxMFllYXJQZXJmb3JtYW5jZTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIFNlY3Rvck9iamVjdCA9IGRhdGEuUmFua0ZZZWFydG9EYXRlWVREUGVyZm9ybWFuY2U7CiAgICAgICAgICAgICAgICB9IC8vIGNvbnN0IHRlbXBvcmFyeUtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTsKCgogICAgICAgICAgICAgICAgX3RoaXMyLmJ1aWxkU2VjdG9yT2JqZWN0KFNlY3Rvck9iamVjdCk7IC8vIGNvbnN0IHRlbXBPYmplY3QgPSBkYXRhOwogICAgICAgICAgICAgICAgLy8gY29uc3QgbmV3QXJyYXkgPSB0aGlzLmNyZWF0ZUNyeXB0b0RhdGEoZGF0YSwgdGVtcG9yYXJ5S2V5cyk7CiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhuZXdBcnJheSk7CgoKICAgICAgICAgICAgICAgIF90aGlzMi5zdG9ja3Jlc3VsdHMgPSB0cnVlOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZ2V0Rm9yZXg6IGZ1bmN0aW9uIGdldEZvcmV4KCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgcGF5bG9hZCwgX3JlZjMsIGRhdGE7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfdGhpczMuaXNMb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHBheWxvYWQgPSB7CiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uOiBfdGhpczMuc2VsZWN0ZnhvcHRpb24sCiAgICAgICAgICAgICAgICAgIGZyb21fY3VycmVuY3k6IF90aGlzMy5maXJzdGZ4Y3VycmVuY3ksCiAgICAgICAgICAgICAgICAgIHRvX2N1cnJlbmN5OiBfdGhpczMuc2Vjb25kZnhjdXJyZW5jeQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBQb3N0c1JlcG9zaXRvcnkucG9zdEFscGhhKHBheWxvYWQpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBfcmVmMyA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IF9yZWYzLmRhdGE7CiAgICAgICAgICAgICAgICBfdGhpczMuc2VsZWN0ZGF0YW9wdGlvbiA9ICcnOwogICAgICAgICAgICAgICAgX3RoaXMzLnNlbGVjdGZ4b3B0aW9uID0gJyc7CiAgICAgICAgICAgICAgICBfdGhpczMuZmlyc3RmeGN1cnJlbmN5ID0gJyc7CiAgICAgICAgICAgICAgICBfdGhpczMuc2Vjb25kZnhjdXJyZW5jeSA9ICcnOwoKICAgICAgICAgICAgICAgIF90aGlzMy5NYXNzYWdlUmVzcG9uc2UoZGF0YSk7CgogICAgICAgICAgICAgICAgX3RoaXMzLnN0b2NrcmVzdWx0cyA9IHRydWU7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBnZXRDcnlwdG86IGZ1bmN0aW9uIGdldENyeXB0bygpIHsKICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAgIC8qI19fUFVSRV9fKi8KICAgICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgdmFyIHBheWxvYWQsIF9yZWY0LCBkYXRhOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX3RoaXM0LmlzTG9hZGluZyA9IHRydWU7CiAgICAgICAgICAgICAgICBwYXlsb2FkID0gewogICAgICAgICAgICAgICAgICBmdW5jdGlvbjogX3RoaXM0LnNlbGVjdGNyeXB0b29wdGlvbiwKICAgICAgICAgICAgICAgICAgZnJvbV9jdXJyZW5jeTogX3RoaXM0LmZpcnN0Y3J5cHRvY3VycmVuY3ksCiAgICAgICAgICAgICAgICAgIHRvX2N1cnJlbmN5OiBfdGhpczQuc2Vjb25kY3J5cHRvY3VycmVuY3kKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gUG9zdHNSZXBvc2l0b3J5LnBvc3RBbHBoYShwYXlsb2FkKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgX3JlZjQgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICAgIGRhdGEgPSBfcmVmNC5kYXRhOwogICAgICAgICAgICAgICAgX3RoaXM0LnNlbGVjdGRhdGFvcHRpb24gPSAnJzsKICAgICAgICAgICAgICAgIF90aGlzNC5zZWxlY3RjcnlwdG9vcHRpb24gPSAnJzsKICAgICAgICAgICAgICAgIF90aGlzNC5maXJzdGNyeXB0b2N1cnJlbmN5ID0gJyc7CiAgICAgICAgICAgICAgICBfdGhpczQuc2Vjb25kY3J5cHRvY3VycmVuY3kgPSAnJzsKCiAgICAgICAgICAgICAgICBfdGhpczQuTWFzc2FnZVJlc3BvbnNlKGRhdGEpOwoKICAgICAgICAgICAgICAgIF90aGlzNC5zdG9ja3Jlc3VsdHMgPSB0cnVlOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0KTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZ2V0VGVjaEluZGljYXRvcnM6IGZ1bmN0aW9uIGdldFRlY2hJbmRpY2F0b3JzKCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICB2YXIgcGF5bG9hZCwgX3JlZjUsIGRhdGE7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfdGhpczUuaXNMb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHBheWxvYWQgPSB7CiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uOiBfdGhpczUuc2VsZWN0dGVjaGluZGljYXRvciwKICAgICAgICAgICAgICAgICAgc3ltYm9sOiBfdGhpczUuc2VsZWN0dGVjaGluZGljYXRvcnN5bWJvbCwKICAgICAgICAgICAgICAgICAgdGltZV9wZXJpb2Q6IF90aGlzNS5zZWxlY3R0ZWNoaW5kaWNhdG9ydGltZXBlcmlvZCwKICAgICAgICAgICAgICAgICAgc2VyaWVzX3R5cGU6IF90aGlzNS5zZWxlY3R0ZWNoc2VyaWVzdHlwZQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIHJldHVybiBQb3N0c1JlcG9zaXRvcnkucG9zdEFscGhhKHBheWxvYWQpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBfcmVmNSA9IF9jb250ZXh0NS5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IF9yZWY1LmRhdGE7CiAgICAgICAgICAgICAgICBfdGhpczUuc3RvY2tuYW1lID0gX3RoaXM1LnNlbGVjdHRlY2hpbmRpY2F0b3JzeW1ib2w7CiAgICAgICAgICAgICAgICBfdGhpczUuc2VsZWN0ZGF0YW9wdGlvbiA9ICcnOwogICAgICAgICAgICAgICAgX3RoaXM1LnNlbGVjdHRlY2hpbmRpY2F0b3JzeW1ib2wgPSAnJzsKICAgICAgICAgICAgICAgIF90aGlzNS5zZWxlY3R0ZWNoaW5kaWNhdG9ydGltZXBlcmlvZCA9ICcnOwogICAgICAgICAgICAgICAgX3RoaXM1LnNlbGVjdHRlY2hzZXJpZXN0eXBlID0gJyc7CgogICAgICAgICAgICAgICAgX3RoaXM1Lk1hc3NhZ2VSZXNwb25zZShkYXRhKTsKCiAgICAgICAgICAgICAgICBfdGhpczUuc2VsZWN0dGVjaGluZGljYXRvciA9ICcnOwogICAgICAgICAgICAgICAgX3RoaXM1LnN0b2NrcmVzdWx0cyA9IHRydWU7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBtYXNzYWdlTWV0YURhdGE6IGZ1bmN0aW9uIG1hc3NhZ2VNZXRhRGF0YShtZXRhS2V5cywgQWxwaGFPYmplY3QpIHsKICAgICAgdmFyIG5TdWJLZXkgPSAnJzsKICAgICAgdGhpcy5hbHBoYXF1b3RlZGF0YSA9IFtdOwogICAgICB2YXIgZnJvbVN0b2NrTmFtZSA9ICcnOwoKICAgICAgZm9yICh2YXIgdGVtcEtleSA9IDA7IHRlbXBLZXkgPCBtZXRhS2V5cy5sZW5ndGg7IHRlbXBLZXkgKz0gMSkgewogICAgICAgIHZhciBuS2V5ID0gbWV0YUtleXNbdGVtcEtleV0udG9TdHJpbmcoKTsKICAgICAgICB2YXIgYWwgPSBBbHBoYU9iamVjdC5NZXRhRGF0YVtuS2V5XTsgLy8gQWxpYXMgdG8gc2hvcnRlbiBsaW5lIDEyMgogICAgICAgIC8vIHJlcGxhY2luZ3RpbWVLZXlzIHRoYXQgaGF2ZSBudW1iZXJzIG9yIHNwZWNpYWwgY2hhcmFjdGVycwoKICAgICAgICB2YXIgbXlzdHJpbmcgPSBuS2V5LnNwbGl0KCcuJykuam9pbignJyk7CiAgICAgICAgblN1YktleSA9IG15c3RyaW5nLnJlcGxhY2UoL1swLTldL2csICcgJyk7CgogICAgICAgIGlmIChuU3ViS2V5ID09PSAnICBTeW1ib2wnKSB7CiAgICAgICAgICB0aGlzLnN0b2NrbmFtZSA9IGFsOwogICAgICAgIH0gZWxzZSBpZiAoblN1YktleSA9PT0gJyAgRnJvbSBTeW1ib2wnIHx8IG5TdWJLZXkgPT09ICcgIFRvIFN5bWJvbCcpIHsKICAgICAgICAgIC8vIEZvciBGb3JleCBEYXRhCiAgICAgICAgICBpZiAoZnJvbVN0b2NrTmFtZSAhPT0gJycpIHsKICAgICAgICAgICAgdGhpcy5zdG9ja25hbWUgPSAiIi5jb25jYXQoZnJvbVN0b2NrTmFtZSwgIiB0byAiKS5jb25jYXQoYWwsICIgIik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBmcm9tU3RvY2tOYW1lID0gYWw7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChuU3ViS2V5ID09PSAnICBEaWdpdGFsIEN1cnJlbmN5IENvZGUnIHx8IG5TdWJLZXkgPT09ICcgIE1hcmtldCBDb2RlJykgewogICAgICAgICAgLy8gRm9yIEZvcmV4IERhdGEKICAgICAgICAgIGlmIChmcm9tU3RvY2tOYW1lICE9PSAnJykgewogICAgICAgICAgICB0aGlzLnN0b2NrbmFtZSA9ICIiLmNvbmNhdChmcm9tU3RvY2tOYW1lLCAiIHRvICIpLmNvbmNhdChhbCwgIiAiKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZyb21TdG9ja05hbWUgPSBhbDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBNYXNzYWdlUmVzcG9uc2U6IGZ1bmN0aW9uIE1hc3NhZ2VSZXNwb25zZShBbHBoYU9iamVjdCkgewogICAgICB2YXIgU3RhcnRpbmdPYmplY3QgPSBBbHBoYU9iamVjdDsKICAgICAgdmFyIG9yaWdpbmFsVGltZUtleXMgPSBPYmplY3Qua2V5cyhTdGFydGluZ09iamVjdCk7CgogICAgICB2YXIgX29yaWdpbmFsVGltZUtleXMgPSBfc2xpY2VkVG9BcnJheShvcmlnaW5hbFRpbWVLZXlzLCAyKSwKICAgICAgICAgIG1ldGEgPSBfb3JpZ2luYWxUaW1lS2V5c1swXSwKICAgICAgICAgIHRpbWUgPSBfb3JpZ2luYWxUaW1lS2V5c1sxXTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCgoKICAgICAgY29uc29sZS5sb2cobWV0YSk7CgogICAgICBpZiAoU3RhcnRpbmdPYmplY3QuUmVhbHRpbWVDdXJyZW5jeUV4Y2hhbmdlUmF0ZSkgewogICAgICAgIC8vIFN0YXJ0aW5nT2JqZWN0Lm9yaWdpbmFsVGltZUtleSA9IEFscGhhT2JqZWN0W3RpbWVdOwogICAgICAgIHRoaXMuZG9DdXJyZW5jeUV4Y2hhbmdlKFN0YXJ0aW5nT2JqZWN0LlJlYWx0aW1lQ3VycmVuY3lFeGNoYW5nZVJhdGUpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGZvcmV4SW5kZXggPSB0aW1lLmluZGV4T2YoJ1RpbWVTZXJpZXNGWCcpOwogICAgICB2YXIgY3J5cHRvSW5kZXggPSB0aW1lLmluZGV4T2YoJ1RpbWVTZXJpZXNEaWdpdGFsQ3VycmVuY3knKTsKICAgICAgdmFyIHRlY2hJbmRleCA9IHRpbWUuaW5kZXhPZignVGVjaG5pY2FsQW5hbHlzaXMnKTsKICAgICAgU3RhcnRpbmdPYmplY3Qub3JpZ2luYWxUaW1lS2V5ID0gQWxwaGFPYmplY3RbdGltZV07CgogICAgICBpZiAoU3RhcnRpbmdPYmplY3QuR2xvYmFsUXVvdGUpIHsKICAgICAgICB0aGlzLmdpdmVRdW90ZShTdGFydGluZ09iamVjdC5HbG9iYWxRdW90ZSk7CiAgICAgIH0gZWxzZSBpZiAodGVjaEluZGV4ICE9PSAtMSkgewogICAgICAgIHRoaXMuY3JlYXRlVGVjaEluZGljYXRvckRhdGEoU3RhcnRpbmdPYmplY3QsIHRpbWUsIHRoaXMuc2VsZWN0dGVjaGluZGljYXRvcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIG1ldGFLZXlzID0gT2JqZWN0LmtleXMoU3RhcnRpbmdPYmplY3QuTWV0YURhdGEpOwogICAgICAgIHRoaXMubWFzc2FnZU1ldGFEYXRhKG1ldGFLZXlzLCBTdGFydGluZ09iamVjdCk7CiAgICAgICAgdmFyIHRpbWVLZXlzID0gT2JqZWN0LmtleXMoU3RhcnRpbmdPYmplY3RbdGltZV0pOwogICAgICAgIHZhciBuZXdTdWJLZXkgPSAnJzsKCiAgICAgICAgZm9yICh2YXIga2V5ID0gMDsga2V5IDwgdGltZUtleXMubGVuZ3RoOyBrZXkgKz0gMSkgewogICAgICAgICAgdmFyIHRlbXBBcnJheSA9IFtdOwogICAgICAgICAgdmFyIG5ld0tleSA9IHRpbWVLZXlzW2tleV0udG9TdHJpbmcoKTsKICAgICAgICAgIHZhciBzdWJLZXlzID0gT2JqZWN0LmtleXMoU3RhcnRpbmdPYmplY3Qub3JpZ2luYWxUaW1lS2V5W25ld0tleV0pOwogICAgICAgICAgdmFyIGEgPSBTdGFydGluZ09iamVjdC5vcmlnaW5hbFRpbWVLZXlbbmV3S2V5XTsgLy8gQWxpYXMgdG8gc2hvcnRlbiBsaW5lIDEyMgogICAgICAgICAgLy8gcmVwbGFjaW5nIHRpbWUga2V5cyB0aGF0IGhhdmUgbnVtYmVycyBvciBzcGVjaWFsIGNoYXJhY3RlcnMKCiAgICAgICAgICBmb3IgKHZhciBuS2V5cyA9IDA7IG5LZXlzIDwgc3ViS2V5cy5sZW5ndGg7IG5LZXlzICs9IDEpIHsKICAgICAgICAgICAgdmFyIG15c3RyaW5nID0gc3ViS2V5c1tuS2V5c10uc3BsaXQoJy4nKS5qb2luKCcnKTsKICAgICAgICAgICAgbmV3U3ViS2V5ID0gbXlzdHJpbmcucmVwbGFjZSgvWzAtOV0vZywgJyAnKTsKCiAgICAgICAgICAgIGlmIChuZXdTdWJLZXkgIT09IHN1YktleXNbbktleXNdKSB7CiAgICAgICAgICAgICAgYVtuZXdTdWJLZXldID0gYVtzdWJLZXlzW25LZXlzXV07CiAgICAgICAgICAgICAgZGVsZXRlIGFbc3ViS2V5c1tuS2V5c11dOwogICAgICAgICAgICAgIHRlbXBBcnJheS5wdXNoKGFbbmV3U3ViS2V5XSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICB0ZW1wQXJyYXkucHVzaChuZXdLZXkpOwoKICAgICAgICAgIGlmIChmb3JleEluZGV4ICE9PSAtMSkgewogICAgICAgICAgICB0aGlzLmNyZWF0ZUZvcmV4RGF0YSh0ZW1wQXJyYXkpOwogICAgICAgICAgfSBlbHNlIGlmIChjcnlwdG9JbmRleCAhPT0gLTEpIHsKICAgICAgICAgICAgdGhpcy5jcmVhdGVDcnlwdG9EYXRhKHRlbXBBcnJheSwgdGltZUtleXMpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIG5ld1RpbWVPYmplY3QgPSB7CiAgICAgICAgICAgICAgb3BlbjogdGVtcEFycmF5WzBdLAogICAgICAgICAgICAgIGhpZ2g6IHRlbXBBcnJheVsxXSwKICAgICAgICAgICAgICBsb3c6IHRlbXBBcnJheVsyXSwKICAgICAgICAgICAgICBjbG9zZTogdGVtcEFycmF5WzNdLAogICAgICAgICAgICAgIHZvbHVtZTogdGVtcEFycmF5WzRdLAogICAgICAgICAgICAgIGRhdGU6IHRlbXBBcnJheVs1XQogICAgICAgICAgICB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKCiAgICAgICAgICAgIGNvbnNvbGUubG9nKG5ld1RpbWVPYmplY3QpOwoKICAgICAgICAgICAgaWYgKE9iamVjdC5lbnRyaWVzKG5ld1RpbWVPYmplY3QpLmxlbmd0aCAhPT0gMCkgewogICAgICAgICAgICAgIHRoaXMuYWxwaGFEYXRhLlRpbWVTZXJpZXMucHVzaChuZXdUaW1lT2JqZWN0KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGdpdmVRdW90ZTogZnVuY3Rpb24gZ2l2ZVF1b3RlKHF1b3RlKSB7CiAgICAgIHZhciBRdW90ZUtleXMgPSBPYmplY3Qua2V5cyhxdW90ZSk7CiAgICAgIHZhciB0ZW1wQXJyYXkgPSBbXTsKICAgICAgdGVtcEFycmF5ID0gdGhpcy5wcmVwT2JqZWN0KHF1b3RlLCBRdW90ZUtleXMpOwogICAgICB2YXIgbmV3T2JqZWN0ID0gewogICAgICAgIFN5bWJvbDogdGVtcEFycmF5WzBdLAogICAgICAgIE9wZW46IHRlbXBBcnJheVsxXSwKICAgICAgICBIaWdoOiB0ZW1wQXJyYXlbMl0sCiAgICAgICAgTG93OiB0ZW1wQXJyYXlbM10sCiAgICAgICAgUHJpY2U6IHRlbXBBcnJheVs0XSwKICAgICAgICBWb2x1bWU6IHRlbXBBcnJheVs1XSwKICAgICAgICBMYXRlc3RUcmFkaW5nRGF5OiB0ZW1wQXJyYXlbNl0sCiAgICAgICAgUHJldmlvdXNDbG9zZTogdGVtcEFycmF5WzddLAogICAgICAgIENoYW5nZTogdGVtcEFycmF5WzhdLAogICAgICAgIENoYW5nZVBlcmNlbnQ6IHRlbXBBcnJheVs5XQogICAgICB9OwogICAgICB0aGlzLmFscGhhcXVvdGVkYXRhID0gW107CgogICAgICBpZiAoT2JqZWN0LmVudHJpZXMobmV3T2JqZWN0KS5sZW5ndGggIT09IDApIHsKICAgICAgICB0aGlzLmFscGhhcXVvdGVkYXRhLnB1c2gobmV3T2JqZWN0KTsKICAgICAgfQogICAgfSwKICAgIGRvQ3VycmVuY3lFeGNoYW5nZTogZnVuY3Rpb24gZG9DdXJyZW5jeUV4Y2hhbmdlKGZ4T2JqZWN0KSB7CiAgICAgIHZhciBmeEtleXMgPSBPYmplY3Qua2V5cyhmeE9iamVjdCk7CiAgICAgIHZhciB0ZW1wQXJyYXkgPSBbXTsKICAgICAgdGVtcEFycmF5ID0gdGhpcy5wcmVwT2JqZWN0KGZ4T2JqZWN0LCBmeEtleXMpOwogICAgICB2YXIgbmV3Rm9yZXhPYmplY3QgPSB7CiAgICAgICAgRnJvbUN1cnJlbmN5OiB0ZW1wQXJyYXlbMF0sCiAgICAgICAgVG9DdXJyZW5jeTogdGVtcEFycmF5WzJdLAogICAgICAgIEV4Y2hhbmdlUmF0ZTogdGVtcEFycmF5WzRdLAogICAgICAgIExhc3RSZXBvcnRUaW1lOiB0ZW1wQXJyYXlbNV0sCiAgICAgICAgQmlkUHJpY2U6IHRlbXBBcnJheVs3XSwKICAgICAgICBCaWRBc2s6IHRlbXBBcnJheVs4XQogICAgICB9OwoKICAgICAgaWYgKE9iamVjdC5lbnRyaWVzKG5ld0ZvcmV4T2JqZWN0KS5sZW5ndGggIT09IDApIHsKICAgICAgICB0aGlzLmFscGhhZnhjdXJyZW5jeWRhdGEucHVzaChuZXdGb3JleE9iamVjdCk7CiAgICAgIH0KCiAgICAgIHRoaXMuc3RvY2tuYW1lID0gIiIuY29uY2F0KG5ld0ZvcmV4T2JqZWN0LkZyb21DdXJyZW5jeSwgIiB0byAiKS5jb25jYXQobmV3Rm9yZXhPYmplY3QuVG9DdXJyZW5jeSwgIiAiKTsKICAgIH0sCiAgICBjcmVhdGVDcnlwdG9EYXRhOiBmdW5jdGlvbiBjcmVhdGVDcnlwdG9EYXRhKHRlbXBBcnJheSwgdGltZUtleXMpIHsKICAgICAgdmFyIG5ld0NyeXB0b09iamVjdCA9IHsKICAgICAgICBvcGVuOiB0ZW1wQXJyYXlbMF0sCiAgICAgICAgaGlnaDogdGVtcEFycmF5WzJdLAogICAgICAgIGxvdzogdGVtcEFycmF5WzRdLAogICAgICAgIGNsb3NlOiB0ZW1wQXJyYXlbNl0sCiAgICAgICAgdm9sdW1lOiB0ZW1wQXJyYXlbN10sCiAgICAgICAgbWFya2V0X2NhcDogdGVtcEFycmF5WzhdLAogICAgICAgIGRhdGU6IHRpbWVLZXlzW3RoaXMuY291bnRjcnlwdG90aW1la2V5c10KICAgICAgfTsKICAgICAgdGhpcy5jb3VudGNyeXB0b3RpbWVrZXlzICs9IDE7CgogICAgICBpZiAoT2JqZWN0LmVudHJpZXMobmV3Q3J5cHRvT2JqZWN0KS5sZW5ndGggIT09IDApIHsKICAgICAgICB0aGlzLmFscGhhQ3J5cHRvRGF0YS5wdXNoKG5ld0NyeXB0b09iamVjdCk7CiAgICAgIH0KICAgIH0sCiAgICBjcmVhdGVGb3JleERhdGE6IGZ1bmN0aW9uIGNyZWF0ZUZvcmV4RGF0YSh0ZW1wQXJyYXkpIHsKICAgICAgdmFyIG5ld0ZvcmV4T2JqZWN0ID0gewogICAgICAgIG9wZW46IHRlbXBBcnJheVswXSwKICAgICAgICBoaWdoOiB0ZW1wQXJyYXlbMV0sCiAgICAgICAgbG93OiB0ZW1wQXJyYXlbMl0sCiAgICAgICAgY2xvc2U6IHRlbXBBcnJheVszXSwKICAgICAgICBkYXRlOiB0ZW1wQXJyYXlbNF0KICAgICAgfTsKCiAgICAgIGlmIChPYmplY3QuZW50cmllcyhuZXdGb3JleE9iamVjdCkubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgdGhpcy5hbHBoYUZvcmV4RGF0YS5wdXNoKG5ld0ZvcmV4T2JqZWN0KTsKICAgICAgfQogICAgfSwKICAgIGNyZWF0ZVRlY2hJbmRpY2F0b3JEYXRhOiBmdW5jdGlvbiBjcmVhdGVUZWNoSW5kaWNhdG9yRGF0YShTdGFydGluZ09iamVjdCwgdGltZSwgaW5kaWNhdG9yKSB7CiAgICAgIHZhciB0aW1lS2V5cyA9IE9iamVjdC5rZXlzKFN0YXJ0aW5nT2JqZWN0W3RpbWVdKTsKICAgICAgdmFyIG5ld1N1YktleSA9ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKCiAgICAgIGNvbnNvbGUubG9nKGluZGljYXRvcik7CgogICAgICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCB0aW1lS2V5cy5sZW5ndGg7IGtleSArPSAxKSB7CiAgICAgICAgdmFyIHRlbXBBcnJheSA9IFtdOwogICAgICAgIHZhciBuZXdLZXkgPSB0aW1lS2V5c1trZXldLnRvU3RyaW5nKCk7CiAgICAgICAgdmFyIHN1YktleXMgPSBPYmplY3Qua2V5cyhTdGFydGluZ09iamVjdC5vcmlnaW5hbFRpbWVLZXlbbmV3S2V5XSk7CiAgICAgICAgdmFyIGEgPSBTdGFydGluZ09iamVjdC5vcmlnaW5hbFRpbWVLZXlbbmV3S2V5XTsgLy8gQWxpYXMgdG8gc2hvcnRlbiBsaW5lIDEyMgogICAgICAgIC8vIHJlcGxhY2luZyB0aW1lIGtleXMgdGhhdCBoYXZlIG51bWJlcnMgb3Igc3BlY2lhbCBjaGFyYWN0ZXJzCgogICAgICAgIGZvciAodmFyIG5LZXlzID0gMDsgbktleXMgPCBzdWJLZXlzLmxlbmd0aDsgbktleXMgKz0gMSkgewogICAgICAgICAgdmFyIG15c3RyaW5nID0gc3ViS2V5c1tuS2V5c10uc3BsaXQoJy4nKS5qb2luKCcnKTsKICAgICAgICAgIG5ld1N1YktleSA9IG15c3RyaW5nLnJlcGxhY2UoL1swLTldL2csICcgJyk7CiAgICAgICAgICBhW25ld1N1YktleV0gPSBhW3N1YktleXNbbktleXNdXTsKICAgICAgICAgIHRlbXBBcnJheS5wdXNoKGFbbmV3U3ViS2V5XSk7CiAgICAgICAgfQoKICAgICAgICB0ZW1wQXJyYXkucHVzaChuZXdTdWJLZXkpOwogICAgICAgIHRlbXBBcnJheS5wdXNoKG5ld0tleSk7CiAgICAgICAgdmFyIHRlY2hPYmplY3QgPSB7CiAgICAgICAgICB2YWx1ZTogdGVtcEFycmF5WzBdLAogICAgICAgICAgaW5kZXg6IHRlbXBBcnJheVsxXSwKICAgICAgICAgIGRhdGU6IHRlbXBBcnJheVsyXQogICAgICAgIH07CiAgICAgICAgdGhpcy5hbHBoYVRlY2hEYXRhLnB1c2godGVjaE9iamVjdCk7CiAgICAgIH0KICAgIH0sCiAgICBwcmVwT2JqZWN0OiBmdW5jdGlvbiBwcmVwT2JqZWN0KG5ld09iamVjdCwgdGVtcEtleXMpIHsKICAgICAgdmFyIHRlbXBPYmplY3QgPSBuZXdPYmplY3Q7CiAgICAgIHZhciB0ZW1wQXJyYXkgPSBbXTsKCiAgICAgIGZvciAodmFyIGtleSA9IDA7IGtleSA8IHRlbXBLZXlzLmxlbmd0aDsga2V5ICs9IDEpIHsKICAgICAgICB2YXIgbmV3S2V5ID0gdGVtcEtleXNba2V5XS50b1N0cmluZygpOwogICAgICAgIHZhciBteXN0cmluZyA9IG5ld0tleS5zcGxpdCgnLicpLmpvaW4oJycpOwogICAgICAgIHZhciBuZXdTdWJLZXkgPSBteXN0cmluZy5yZXBsYWNlKC9bMC05XS9nLCAnICcpOwoKICAgICAgICBpZiAobmV3U3ViS2V5ICE9PSBuZXdPYmplY3Rba2V5XSkgewogICAgICAgICAgdGVtcE9iamVjdFtuZXdTdWJLZXldID0gdGVtcE9iamVjdFtuZXdLZXldOwogICAgICAgICAgZGVsZXRlIHRlbXBPYmplY3RbbmV3S2V5XTsKICAgICAgICAgIHRlbXBBcnJheS5wdXNoKHRlbXBPYmplY3RbbmV3U3ViS2V5XSk7CgogICAgICAgICAgaWYgKGtleSA9PT0gMCkgewogICAgICAgICAgICB0aGlzLnN0b2NrbmFtZSA9IHRlbXBPYmplY3RbbmV3U3ViS2V5XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0ZW1wQXJyYXk7CiAgICB9LAogICAgYnVpbGRTZWN0b3JPYmplY3Q6IGZ1bmN0aW9uIGJ1aWxkU2VjdG9yT2JqZWN0KFN0YXJ0aW5nT2JqZWN0KSB7CiAgICAgIHRoaXMuc3RvY2tuYW1lID0gdGhpcy5zZWN0b3JwZXJmb3JtYW5jZXRpbWU7CiAgICAgIHZhciB0aW1lS2V5cyA9IE9iamVjdC5rZXlzKFN0YXJ0aW5nT2JqZWN0KTsKICAgICAgdmFyIHRlbXBBcnJheSA9IFtdOwoKICAgICAgZm9yICh2YXIga2V5ID0gMDsga2V5IDwgdGltZUtleXMubGVuZ3RoOyBrZXkgKz0gMSkgewogICAgICAgIHZhciBuZXdLZXkgPSB0aW1lS2V5c1trZXldLnRvU3RyaW5nKCk7CiAgICAgICAgdGVtcEFycmF5LnB1c2goU3RhcnRpbmdPYmplY3RbbmV3S2V5XSk7CiAgICAgICAgdGhpcy5zZWNoZWFkZXJzLnB1c2godGltZUtleXNba2V5XSk7CiAgICAgIH0KCiAgICAgIHZhciBTZWNPYmplY3QgPSB7CiAgICAgICAgY29tc3NlcnY6IHRlbXBBcnJheVswXSwKICAgICAgICBjb25zZGlzYzogdGVtcEFycmF5WzFdLAogICAgICAgIGNvbnNzdGFwczogdGVtcEFycmF5WzJdLAogICAgICAgIGVuZXJneTogdGVtcEFycmF5WzNdLAogICAgICAgIGZpbmFuY2lhbHM6IHRlbXBBcnJheVs0XSwKICAgICAgICBoZWFsdGg6IHRlbXBBcnJheVs1XSwKICAgICAgICBpbmR1c3RyaWFsczogdGVtcEFycmF5WzZdLAogICAgICAgIGl0OiB0ZW1wQXJyYXlbN10sCiAgICAgICAgbWF0ZXJpYWxzOiB0ZW1wQXJyYXlbOF0sCiAgICAgICAgcmVhbDogdGVtcEFycmF5WzldLAogICAgICAgIHV0aWxzOiB0ZW1wQXJyYXlbMTBdCiAgICAgIH07CiAgICAgIHRoaXMuYWxwaGFTZWNEYXRhLnB1c2goU2VjT2JqZWN0KTsKICAgICAgdGhpcy5zZWN0b3JwZXJmb3JtYW5jZXRpbWUgPSAnJzsKICAgIH0sCiAgICBjbGVhcmRhdGE6IGZ1bmN0aW9uIGNsZWFyZGF0YSgpIHsKICAgICAgdGhpcy5zdG9ja25hbWUgPSAnJzsKICAgICAgdGhpcy5zdG9ja3Jlc3VsdHMgPSBmYWxzZTsKCiAgICAgIGlmICh0aGlzLmFscGhhZGF0YS5UaW1lU2VyaWVzLmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLmFscGhhZGF0YS5UaW1lU2VyaWVzID0gW107IC8vIFRvIGNsZWFyIHRoZSBPYmplY3QKCiAgICAgICAgdGhpcy5hbHBoYWRhdGEuVGltZVNlcmllcy5wb3AoKTsgLy8gVG8gcmVtb3ZlIHRoZSBlbXB0eSBvYmplY3QgZnJvbSB0aGUgYXJyYXkKICAgICAgfSBlbHNlIGlmICh0aGlzLmFscGhhcXVvdGVkYXRhLmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLmFscGhhcXVvdGVkYXRhID0gW107CiAgICAgICAgdGhpcy5hbHBoYXF1b3RlZGF0YS5wb3AoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmFscGhhRm9yZXhEYXRhLmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLmFscGhhRm9yZXhEYXRhID0gW107CiAgICAgICAgdGhpcy5hbHBoYXF1b3RlZGF0YS5wb3AoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmFscGhhZnhjdXJyZW5jeWRhdGEubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMuYWxwaGFmeGN1cnJlbmN5ZGF0YSA9IFtdOwogICAgICAgIHRoaXMuYWxwaGFmeGN1cnJlbmN5ZGF0YS5wb3AoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmFscGhhQ3J5cHRvRGF0YS5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5hbHBoYUNyeXB0b0RhdGEgPSBbXTsKICAgICAgICB0aGlzLmFscGhhQ3J5cHRvRGF0YS5wb3AoKTsKICAgICAgICB0aGlzLmNvdW50Y3J5cHRvdGltZWtleXMgPSAwOwogICAgICB9IGVsc2UgaWYgKHRoaXMuYWxwaGFUZWNoRGF0YS5sZW5ndGggPiAwKSB7CiAgICAgICAgdGhpcy5hbHBoYVRlY2hEYXRhID0gW107CiAgICAgICAgdGhpcy5hbHBoYVRlY2hEYXRhLnBvcCgpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuYWxwaGFTZWNEYXRhLmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLmFscGhhU2VjRGF0YSA9IFtdOwogICAgICAgIHRoaXMuYWxwaGFTZWNEYXRhLnBvcCgpOwogICAgICB9CiAgICB9LAogICAgaG9tZTogZnVuY3Rpb24gaG9tZSgpIHsKICAgICAgLy8gdGhpcy4kc3RvcmUuY29tbWl0KCdTaG93QWxwaGEnLCBmYWxzZSk7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvJyk7CiAgICB9LAogICAgZHVtbXk6IGZ1bmN0aW9uIGR1bW15KGl0ZW0pIHsKICAgICAgdGhpcy5hbmFseXplZGF0YSA9IHRydWU7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQoKICAgICAgY29uc29sZS5sb2coaXRlbSk7CiAgICB9LAogICAgQ2FsbEFncmljdWx0dXJlOiBmdW5jdGlvbiBDYWxsQWdyaWN1bHR1cmUoKSB7CiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvYWdyaWN1bHR1cmUnKTsKICAgIH0sCiAgICBDYWxsRWNvbm9taWM6IGZ1bmN0aW9uIENhbGxFY29ub21pYygpIHsKICAgICAgdGhpcy4kcm91dGVyLnB1c2goJy9lY29ub21pYycpOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuYWxwaGFkYXRhLlRpbWVTZXJpZXMgPSBbXTsKICAgIHRoaXMuYWxwaGFxdW90ZWRhdGEgPSBbXTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICBjb25zb2xlLmxvZyh0aGlzLiRzdG9yZS5zdGF0ZS51c2VybmFtZSk7CiAgfQp9Ow=="},{"version":3,"sources":["AlphaContainer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container\">\n    <v-app-bar\n      app\n      color=\"black\"\n      dark\n      dense\n      >\n      <v-toolbar-title>Global Analytics -- AlphaVantage</v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-toolbar-title v-if=\"stockname\"> Current Commodity: {{ stockname }}</v-toolbar-title>\n      <template>\n        <v-menu offset-y v-if=\"stockname\">\n          <template v-slot:activator=\"{ on }\">\n            <v-btn small icon fab\n              :items=\"menuoptions\"\n              v-if=\"stockname\"\n              v-on=\"on\">\n              <v-icon>mdi-chevron-down</v-icon>\n            </v-btn>\n          </template>\n          <v-list>\n            <v-list-item\n              v-for=\"(item, index) in menuoptions\"\n              :key=\"index\"\n              @click=\"dummy(item)\"\n            >\n              <v-list-item-title>{{ item }}</v-list-item-title>\n            </v-list-item>\n          </v-list>\n        </v-menu>\n      </template>\n      <v-btn v-if=\"stockname\" @click=\"cleardata\" small icon fab>\n        <v-icon>mdi-plus</v-icon>\n      </v-btn>\n      <v-spacer></v-spacer>\n      <v-btn @click=\"CallAgriculture\">\n        Agricultural\n      </v-btn>\n      <v-btn @click=\"CallEconomic\">\n        Economic\n      </v-btn>\n      <v-btn @click=\"dummy('Weather')\">\n        Weather\n      </v-btn>\n      <v-btn @click=\"home\">\n        Home\n      </v-btn>\n    </v-app-bar>\n    <br><br>\n    <template name=\"formcomponent\">\n      <v-combobox\n        v-if=\"!stockresults\"\n        v-model=\"selectdataoption\"\n        :items=\"alphadataoptions\"\n        label=\"Select an alphadata function\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectdataoption==='Stock Time Series'\"\n        v-model=\"selectstockoption\"\n        :items=\"alphastockoptions\"\n        label=\"Select a time series option\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectdataoption==='Tech Indicators'\"\n        v-model=\"selecttechindicator\"\n        :items=\"alphatechindicators\"\n        label=\"Select tech indicator\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selecttechindicator!==''\"\n        v-model=\"selecttechindicatorsymbol\"\n        :items=\"alphatechindicatorsymbols\"\n        label=\"Select a security\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selecttechindicatorsymbol!==''\"\n        v-model=\"selecttechindicatortimeperiod\"\n        :items=\"alphatechindicatortimeperiod\"\n        label=\"Select time period\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selecttechindicatortimeperiod!==''\"\n        v-model=\"selecttechseriestype\"\n        :items=\"alphatechseriestype\"\n        label=\"Select series type\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectstockoption!==''\"\n        v-model=\"selectstock\"\n        :items=\"alphabluechipstocks\"\n        label=\"Select a bluechip or type in your own\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectdataoption==='Forex'\"\n        v-model=\"selectfxoption\"\n        :items=\"alphafxoptions\"\n        label=\"Select a forex option\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectdataoption==='Crypto'\"\n        v-model=\"selectcryptooption\"\n        :items=\"alphacryptooptions\"\n        label=\"Select a crypto option\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectcryptooption!=''\"\n        v-model=\"firstcryptocurrency\"\n        :items=\"alphacryptocurrencies\"\n        label=\"Select a currency to convert from\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"firstcryptocurrency!=''\"\n        v-model=\"secondcryptocurrency\"\n        :items=\"alphafxcurrencies\"\n        label=\"Select a currency to convert to\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectfxoption!=''\"\n        v-model=\"firstfxcurrency\"\n        :items=\"alphafxcurrencies\"\n        label=\"Select a currency to convert from\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"firstfxcurrency!=''\"\n        v-model=\"secondfxcurrency\"\n        :items=\"alphafxcurrencies\"\n        label=\"Select a currency to convert to\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-combobox\n        v-if=\"selectdataoption==='Sector Performance'\"\n        v-model=\"sectorperformancetime\"\n        :items=\"alphasectorperformancetime\"\n        label=\"Select a time frame\"\n        chips\n        clearable\n      ></v-combobox>\n      <v-btn color=\"primary\" v-if=\"selectstock!==''\" @click=\"getTimeSeries\">\n        Query Stock Data\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"secondfxcurrency!==''\" @click=\"getForex\">\n        Query Forex Data\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"secondcryptocurrency!==''\" @click=\"getCrypto\">\n        Query Crypto Data\n      </v-btn>\n      <v-btn color=\"primary\" v-if=\"sectorperformancetime !==''\" @click=\"getSecPer\">\n        Query Sector Performance\n      </v-btn>\n      <!-- TODO create an API Call for tech indicators -->\n      <v-btn color=\"primary\" v-if=\"selecttechseriestype !==''\" @click=\"getTechIndicators\">\n        Query Tech Indicators\n      </v-btn>\n    </template>\n    <template v-if=\"alphadata.TimeSeries.length > 0\">\n      <v-data-table\n        :headers=\"headers\"\n        :items=\"alphadata.TimeSeries\"\n        class=\"elevation-1\"\n      >\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaquotedata.length > 0\">\n      <v-data-table\n        :headers=\"quoteheaders\"\n        :items=\"alphaquotedata\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaForexData.length > 0\">\n      <v-data-table\n        :headers=\"forexheaders\"\n        :items=\"alphaForexData\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphafxcurrencydata.length > 0\">\n      <v-data-table\n        :headers=\"alphafxcurrencyheader\"\n        :items=\"alphafxcurrencydata\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaCryptoData.length > 0\">\n      <v-data-table\n        :headers=\"cryptoheaders\"\n        :items=\"alphaCryptoData\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaTechData.length > 0\">\n      <v-data-table\n        :headers=\"techheaders\"\n        :items=\"alphaTechData\"\n        class=\"elevation-1\">\n      </v-data-table>\n    </template>\n    <template v-else-if=\"alphaSecData.length > 0\">\n      <v-data-table\n        :headers=\"secheaders\"\n        :items=\"alphaSecData\"\n        class=\"elevation-1\"\n        disable-sort\n        hide-default-footer>\n      </v-data-table>\n    </template>\n    <template v-if=\"analyzedata\">\n      <trading-vue></trading-vue>\n    </template>\n  </div>\n</template>\n\n<script>\nimport TradingVue from 'trading-vue-js';\nimport MonthlyData from './charts/CommitChart.vue';\nimport RepositoryFactory from '../repositories/RepositoryFactory';\nimport store from '../store';\n\nconst PostsRepository = RepositoryFactory.get('posts');\nexport default {\n  store,\n  data() {\n    return {\n      components: {\n        MonthlyData,\n        TradingVue,\n      },\n      alphaSecData: [],\n      secheaders: [{ text: 'Communication Services', value: 'comsserv' }, { text: 'Consumer Discretionary', value: 'consdisc' }, { text: 'Consumer Staples', value: 'consstaps' }, { text: 'Energy', value: 'energy' }, { text: 'Financials', value: 'financials' }, { text: 'Health Care', value: 'health' }, { text: 'Industrials', value: 'industrials' }, { text: 'IT', value: 'it' }, { text: 'Materials', value: 'materials' }, { text: 'Real Estate', value: 'real' }, { text: 'Utilities', value: 'utils' }],\n      sectorperformancetime: '',\n      alphasectorperformancetime: ['Real Time', '1 Day', '5 Day', '1 Month', '3 Month', 'Fiscal Year', '1 Year', '3 Year', '5 Year', '10 Year'],\n      techheaders: [{ text: 'Value', value: 'value' }, { text: 'Index', value: 'index' }, { text: 'Date', value: 'date' }],\n      alphaTechData: [],\n      alphaquotedata: [],\n      quoteheaders: [{ text: 'Symbol', value: 'Symbol' }, { text: 'Open', value: 'Open' }, { text: 'High', value: 'High' }, { text: 'Low', value: 'Low' }, { text: 'Price', value: 'Price' }, { text: 'Volume', value: 'Volume' }, { text: 'Latest Trading Day', value: 'LatestTradingDay' }, { text: 'Previous Close', value: 'PreviousClose' }, { text: 'Change', value: 'Change' }, { text: 'Change Percent', value: 'ChangePercent' }],\n      alphadata: {\n        MetaData: [],\n        TimeSeries: [],\n      },\n      headers: [{ text: 'Open', value: 'open' }, { text: 'Close', value: 'close' }, { text: 'High', value: 'high' }, { text: 'Low', value: 'low' }, { text: 'Volume', value: 'volume' }, { text: 'Date (Eastern)', value: 'date' }],\n      subheaders: [],\n      forexheaders: [{ text: 'Open', value: 'open' }, { text: 'Close', value: 'close' }, { text: 'High', value: 'high' }, { text: 'Low', value: 'low' }, { text: 'Date (UTC)', value: 'date' }],\n      alphaForexData: [],\n      cryptoheaders: [{ text: 'Open', value: 'open' }, { text: 'Close', value: 'close' }, { text: 'High', value: 'high' }, { text: 'Low', value: 'low' }, { text: 'Volume', value: 'volume' }, { text: 'Market Cap', value: 'market_cap' }, { text: 'Date', value: 'date' }],\n      alphaCryptoData: [],\n      drawer: false,\n      stockname: '',\n      menuoptions: ['Analyze', 'Metrics', 'Graphs'],\n      selectdataoption: '',\n      alphadataoptions: ['Stock Time Series', 'Forex', 'Crypto', 'Tech Indicators', 'Sector Performance'],\n      alphastockoptions: ['Intraday', 'Daily', 'Weekly', 'Monthly', 'Quote'],\n      alphabluechipstocks: ['AAPL', 'MSFT', 'AMZN', 'GOOG', 'FB'],\n      alphafxoptions: ['Currency Exchange Rate', 'Intraday', 'Daily', 'Weekly', 'Monthly'],\n      alphafxcurrencies: ['USD', 'EUR', 'CAD', 'CHF', 'CNY', 'DKK', 'GBP', 'INR', 'JPY', 'RUB'],\n      alphacryptocurrencies: ['BTC', 'ETH'],\n      alphacryptooptions: ['Currency Exchange Rate', 'Crypto Daily', 'Crypto Weekly', 'Crypto Monthly'],\n      alphatechindicators: ['SMA', 'EMA', 'MACD', 'STOCH', 'RSI', 'ADX', 'CCI', 'AROON', 'BBANDS', 'AD', 'OBV'],\n      alphatechseriestype: ['High', 'Low', 'Close', 'Open'],\n      selecttechseriestype: '',\n      selecttechindicator: '',\n      selectcryptooption: '',\n      firstcryptocurrency: '',\n      secondcryptocurrency: '',\n      selectfxoption: '',\n      firstfxcurrency: '',\n      secondfxcurrency: '',\n      alphafxcurrencydata: [],\n      alphafxcurrencyheader: [{ text: 'From Currency', value: 'FromCurrency' }, { text: 'To Currency', value: 'ToCurrency' }, { text: 'Exchange Rate', value: 'ExchangeRate' }, { text: 'Last Report Time (UTC)', value: 'LastReportTime' }, { text: 'Bid Price', value: 'BidPrice' }, { text: 'Bid Ask', value: 'BidAsk' }],\n      selectstockoption: '',\n      selectstock: '',\n      searchparameters: '',\n      stockresults: false,\n      countcryptotimekeys: 0,\n      alphatechindicatorsymbols: ['FB', 'MSFT', 'AAPL', 'AMZN', 'GOOG'],\n      selecttechindicatorsymbol: '',\n      alphatechindicatortimeperiod: ['10', '20', '50', '100', '200'],\n      selecttechindicatortimeperiod: '',\n      analyzedata: false,\n    };\n  },\n  computed: {\n    alphaData() {\n      return this.$data.alphadata;\n    },\n  },\n  methods: {\n    async getTimeSeries() {\n      // this.isLoading = true;\n      const payload = {\n        dataoption: this.selectdataoption,\n        stockoption: this.selectstockoption,\n        stock: this.selectstock,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      // this.searchparameters = this.selectdataoption + ' / ' + this.selectstockoption;\n      this.selectdataoption = '';\n      this.selectstock = '';\n      this.selectstockoption = '';\n      this.MassageResponse(data);\n      this.stockresults = true;\n    },\n    async getSecPer() {\n      const payload = {\n        function: 'Sector',\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.selectdataoption = '';\n      let SectorObject = {};\n      if (this.sectorperformancetime === 'Real Time') {\n        SectorObject = data.RankARealTimePerformance;\n      } else if (this.sectorperformancetime === '1 Day') {\n        SectorObject = data.RankB1DayPerformance;\n      } else if (this.sectorperformancetime === '5 Day') {\n        SectorObject = data.RankC5DayPerformance;\n      } else if (this.sectorperformancetime === '1 Month') {\n        SectorObject = data.RankD1MonthPerformance;\n      } else if (this.sectorperformancetime === '3 Month') {\n        SectorObject = data.RankE3MonthPerformance;\n      } else if (this.sectorperformancetime === '1 Year') {\n        SectorObject = data.RankG1YearPerformance;\n      } else if (this.sectorperformancetime === '3 Year') {\n        SectorObject = data.RankH3YearPerformance;\n      } else if (this.sectorperformancetime === '5 Year') {\n        SectorObject = data.RankI5YearPerformance;\n      } else if (this.sectorperformancetime === '10 Year') {\n        SectorObject = data.RankJ10YearPerformance;\n      } else {\n        SectorObject = data.RankFYeartoDateYTDPerformance;\n      }\n      // const temporaryKeys = Object.keys(data);\n      this.buildSectorObject(SectorObject);\n      // const tempObject = data;\n      // const newArray = this.createCryptoData(data, temporaryKeys);\n      // console.log(newArray);\n      this.stockresults = true;\n    },\n    async getForex() {\n      this.isLoading = true;\n      const payload = {\n        function: this.selectfxoption,\n        from_currency: this.firstfxcurrency,\n        to_currency: this.secondfxcurrency,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.selectdataoption = '';\n      this.selectfxoption = '';\n      this.firstfxcurrency = '';\n      this.secondfxcurrency = '';\n      this.MassageResponse(data);\n      this.stockresults = true;\n    },\n    async getCrypto() {\n      this.isLoading = true;\n      const payload = {\n        function: this.selectcryptooption,\n        from_currency: this.firstcryptocurrency,\n        to_currency: this.secondcryptocurrency,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.selectdataoption = '';\n      this.selectcryptooption = '';\n      this.firstcryptocurrency = '';\n      this.secondcryptocurrency = '';\n      this.MassageResponse(data);\n      this.stockresults = true;\n    },\n    async getTechIndicators() {\n      this.isLoading = true;\n      const payload = {\n        function: this.selecttechindicator,\n        symbol: this.selecttechindicatorsymbol,\n        time_period: this.selecttechindicatortimeperiod,\n        series_type: this.selecttechseriestype,\n      };\n      const { data } = await PostsRepository.postAlpha(payload);\n      this.stockname = this.selecttechindicatorsymbol;\n      this.selectdataoption = '';\n      this.selecttechindicatorsymbol = '';\n      this.selecttechindicatortimeperiod = '';\n      this.selecttechseriestype = '';\n      this.MassageResponse(data);\n      this.selecttechindicator = '';\n      this.stockresults = true;\n    },\n    massageMetaData(metaKeys, AlphaObject) {\n      let nSubKey = '';\n      this.alphaquotedata = [];\n      let fromStockName = '';\n      for (let tempKey = 0; tempKey < metaKeys.length; tempKey += 1) {\n        const nKey = metaKeys[tempKey].toString();\n        const al = AlphaObject.MetaData[nKey]; // Alias to shorten line 122\n        // replacingtimeKeys that have numbers or special characters\n        const mystring = nKey.split('.').join('');\n        nSubKey = mystring.replace(/[0-9]/g, ' ');\n        if (nSubKey === '  Symbol') {\n          this.stockname = al;\n        } else if (nSubKey === '  From Symbol' || nSubKey === '  To Symbol') { // For Forex Data\n          if (fromStockName !== '') {\n            this.stockname = `${fromStockName} to ${al} `;\n          } else {\n            fromStockName = al;\n          }\n        } else if (nSubKey === '  Digital Currency Code' || nSubKey === '  Market Code') { // For Forex Data\n          if (fromStockName !== '') {\n            this.stockname = `${fromStockName} to ${al} `;\n          } else {\n            fromStockName = al;\n          }\n        }\n      }\n    },\n    MassageResponse(AlphaObject) {\n      const StartingObject = AlphaObject;\n      const originalTimeKeys = Object.keys(StartingObject);\n      const [meta, time] = originalTimeKeys;\n      // eslint-disable-next-line\n      console.log(meta);\n      if (StartingObject.RealtimeCurrencyExchangeRate) {\n        // StartingObject.originalTimeKey = AlphaObject[time];\n        this.doCurrencyExchange(StartingObject.RealtimeCurrencyExchangeRate);\n        return;\n      }\n      const forexIndex = time.indexOf('TimeSeriesFX');\n      const cryptoIndex = time.indexOf('TimeSeriesDigitalCurrency');\n      const techIndex = time.indexOf('TechnicalAnalysis');\n      StartingObject.originalTimeKey = AlphaObject[time];\n      if (StartingObject.GlobalQuote) {\n        this.giveQuote(StartingObject.GlobalQuote);\n      } else if (techIndex !== -1) {\n        this.createTechIndicatorData(StartingObject, time, this.selecttechindicator);\n      } else {\n        const metaKeys = Object.keys(StartingObject.MetaData);\n        this.massageMetaData(metaKeys, StartingObject);\n        const timeKeys = Object.keys(StartingObject[time]);\n        let newSubKey = '';\n        for (let key = 0; key < timeKeys.length; key += 1) {\n          const tempArray = [];\n          const newKey = timeKeys[key].toString();\n          const subKeys = Object.keys(StartingObject.originalTimeKey[newKey]);\n          const a = StartingObject.originalTimeKey[newKey]; // Alias to shorten line 122\n          // replacing time keys that have numbers or special characters\n          for (let nKeys = 0; nKeys < subKeys.length; nKeys += 1) {\n            const mystring = subKeys[nKeys].split('.').join('');\n            newSubKey = mystring.replace(/[0-9]/g, ' ');\n            if (newSubKey !== subKeys[nKeys]) {\n              a[newSubKey] = a[subKeys[nKeys]];\n              delete a[subKeys[nKeys]];\n              tempArray.push(a[newSubKey]);\n            }\n          }\n          tempArray.push(newKey);\n          if (forexIndex !== -1) {\n            this.createForexData(tempArray);\n          } else if (cryptoIndex !== -1) {\n            this.createCryptoData(tempArray, timeKeys);\n          } else {\n            const newTimeObject = {\n              open: tempArray[0],\n              high: tempArray[1],\n              low: tempArray[2],\n              close: tempArray[3],\n              volume: tempArray[4],\n              date: tempArray[5],\n            };\n            // eslint-disable-next-line\n            console.log(newTimeObject);\n            if (Object.entries(newTimeObject).length !== 0) {\n              this.alphaData.TimeSeries.push(newTimeObject);\n            }\n          }\n        }\n      }\n    },\n    giveQuote(quote) {\n      const QuoteKeys = Object.keys(quote);\n      let tempArray = [];\n      tempArray = this.prepObject(quote, QuoteKeys);\n      const newObject = {\n        Symbol: tempArray[0],\n        Open: tempArray[1],\n        High: tempArray[2],\n        Low: tempArray[3],\n        Price: tempArray[4],\n        Volume: tempArray[5],\n        LatestTradingDay: tempArray[6],\n        PreviousClose: tempArray[7],\n        Change: tempArray[8],\n        ChangePercent: tempArray[9],\n      };\n      this.alphaquotedata = [];\n      if (Object.entries(newObject).length !== 0) {\n        this.alphaquotedata.push(newObject);\n      }\n    },\n    doCurrencyExchange(fxObject) {\n      const fxKeys = Object.keys(fxObject);\n      let tempArray = [];\n      tempArray = this.prepObject(fxObject, fxKeys);\n      const newForexObject = {\n        FromCurrency: tempArray[0],\n        ToCurrency: tempArray[2],\n        ExchangeRate: tempArray[4],\n        LastReportTime: tempArray[5],\n        BidPrice: tempArray[7],\n        BidAsk: tempArray[8],\n      };\n      if (Object.entries(newForexObject).length !== 0) {\n        this.alphafxcurrencydata.push(newForexObject);\n      }\n      this.stockname = `${newForexObject.FromCurrency} to ${newForexObject.ToCurrency} `;\n    },\n    createCryptoData(tempArray, timeKeys) {\n      const newCryptoObject = {\n        open: tempArray[0],\n        high: tempArray[2],\n        low: tempArray[4],\n        close: tempArray[6],\n        volume: tempArray[7],\n        market_cap: tempArray[8],\n        date: timeKeys[this.countcryptotimekeys],\n      };\n      this.countcryptotimekeys += 1;\n      if (Object.entries(newCryptoObject).length !== 0) {\n        this.alphaCryptoData.push(newCryptoObject);\n      }\n    },\n    createForexData(tempArray) {\n      const newForexObject = {\n        open: tempArray[0],\n        high: tempArray[1],\n        low: tempArray[2],\n        close: tempArray[3],\n        date: tempArray[4],\n      };\n      if (Object.entries(newForexObject).length !== 0) {\n        this.alphaForexData.push(newForexObject);\n      }\n    },\n    createTechIndicatorData(StartingObject, time, indicator) {\n      const timeKeys = Object.keys(StartingObject[time]);\n      let newSubKey = '';\n      // eslint-disable-next-line\n      console.log(indicator);\n      for (let key = 0; key < timeKeys.length; key += 1) {\n        const tempArray = [];\n        const newKey = timeKeys[key].toString();\n        const subKeys = Object.keys(StartingObject.originalTimeKey[newKey]);\n        const a = StartingObject.originalTimeKey[newKey]; // Alias to shorten line 122\n        // replacing time keys that have numbers or special characters\n        for (let nKeys = 0; nKeys < subKeys.length; nKeys += 1) {\n          const mystring = subKeys[nKeys].split('.').join('');\n          newSubKey = mystring.replace(/[0-9]/g, ' ');\n          a[newSubKey] = a[subKeys[nKeys]];\n          tempArray.push(a[newSubKey]);\n        }\n        tempArray.push(newSubKey);\n        tempArray.push(newKey);\n        const techObject = {\n          value: tempArray[0],\n          index: tempArray[1],\n          date: tempArray[2],\n        };\n        this.alphaTechData.push(techObject);\n      }\n    },\n    prepObject(newObject, tempKeys) {\n      const tempObject = newObject;\n      const tempArray = [];\n      for (let key = 0; key < tempKeys.length; key += 1) {\n        const newKey = tempKeys[key].toString();\n        const mystring = newKey.split('.').join('');\n        const newSubKey = mystring.replace(/[0-9]/g, ' ');\n        if (newSubKey !== newObject[key]) {\n          tempObject[newSubKey] = tempObject[newKey];\n          delete tempObject[newKey];\n          tempArray.push(tempObject[newSubKey]);\n          if (key === 0) {\n            this.stockname = tempObject[newSubKey];\n          }\n        }\n      }\n      return tempArray;\n    },\n    buildSectorObject(StartingObject) {\n      this.stockname = this.sectorperformancetime;\n      const timeKeys = Object.keys(StartingObject);\n      const tempArray = [];\n      for (let key = 0; key < timeKeys.length; key += 1) {\n        const newKey = timeKeys[key].toString();\n        tempArray.push(StartingObject[newKey]);\n        this.secheaders.push(timeKeys[key]);\n      }\n      const SecObject = {\n        comsserv: tempArray[0],\n        consdisc: tempArray[1],\n        consstaps: tempArray[2],\n        energy: tempArray[3],\n        financials: tempArray[4],\n        health: tempArray[5],\n        industrials: tempArray[6],\n        it: tempArray[7],\n        materials: tempArray[8],\n        real: tempArray[9],\n        utils: tempArray[10],\n      };\n      this.alphaSecData.push(SecObject);\n      this.sectorperformancetime = '';\n    },\n    cleardata() {\n      this.stockname = '';\n      this.stockresults = false;\n      if (this.alphadata.TimeSeries.length > 0) {\n        this.alphadata.TimeSeries = []; // To clear the Object\n        this.alphadata.TimeSeries.pop(); // To remove the empty object from the array\n      } else if (this.alphaquotedata.length > 0) {\n        this.alphaquotedata = [];\n        this.alphaquotedata.pop();\n      } else if (this.alphaForexData.length > 0) {\n        this.alphaForexData = [];\n        this.alphaquotedata.pop();\n      } else if (this.alphafxcurrencydata.length > 0) {\n        this.alphafxcurrencydata = [];\n        this.alphafxcurrencydata.pop();\n      } else if (this.alphaCryptoData.length > 0) {\n        this.alphaCryptoData = [];\n        this.alphaCryptoData.pop();\n        this.countcryptotimekeys = 0;\n      } else if (this.alphaTechData.length > 0) {\n        this.alphaTechData = [];\n        this.alphaTechData.pop();\n      } else if (this.alphaSecData.length > 0) {\n        this.alphaSecData = [];\n        this.alphaSecData.pop();\n      }\n    },\n    home() {\n      // this.$store.commit('ShowAlpha', false);\n      this.$router.push('/');\n    },\n    dummy(item) {\n      this.analyzedata = true;\n      // eslint-disable-next-line\n      console.log(item);\n    },\n    CallAgriculture() {\n      this.$router.push('/agriculture');\n    },\n    CallEconomic() {\n      this.$router.push('/economic');\n    },\n  },\n  created() {\n    this.alphadata.TimeSeries = [];\n    this.alphaquotedata = [];\n  },\n  mounted() {\n    console.log(this.$store.state.username);\n  },\n};\n</script>\n"],"sourceRoot":"src/components"}]}