{"remainingRequest":"/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/babel-loader/lib/index.js!/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/pstout/practice_folder/flask-vue-crud/env/client/src/components/AlphaContainer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/pstout/practice_folder/flask-vue-crud/env/client/src/components/AlphaContainer.vue","mtime":1582767311599},{"path":"/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/pstout/practice_folder/flask-vue-crud/env/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL3BzdG91dC9wcmFjdGljZV9mb2xkZXIvZmxhc2stdnVlLWNydWQvZW52L2NsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBSZXBvc2l0b3J5RmFjdG9yeSBmcm9tICcuLi9yZXBvc2l0b3JpZXMvUmVwb3NpdG9yeUZhY3RvcnknOwp2YXIgUG9zdHNSZXBvc2l0b3J5ID0gUmVwb3NpdG9yeUZhY3RvcnkuZ2V0KCdwb3N0cycpOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGFscGhhZGF0YTogW3sKICAgICAgICBNZXRhRGF0YToge30sCiAgICAgICAgVGltZVNlcmllczoge30KICAgICAgfV0KICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRBbHBoYVZhbnRhZ2U6IGZ1bmN0aW9uIGdldEFscGhhVmFudGFnZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvcigKICAgICAgLyojX19QVVJFX18qLwogICAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBfcmVmLCBkYXRhOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfdGhpcy5pc0xvYWRpbmcgPSB0cnVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gUG9zdHNSZXBvc2l0b3J5LmdldEFscGhhKCk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF9yZWYgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IF9yZWYuZGF0YTsKCiAgICAgICAgICAgICAgICBfdGhpcy5NYXNzYWdlUmVzcG9uc2UoZGF0YSk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBNYXNzYWdlUmVzcG9uc2U6IGZ1bmN0aW9uIE1hc3NhZ2VSZXNwb25zZShBbHBoYU9iamVjdCkgewogICAgICB0aGlzLmFscGhhZGF0YS5NZXRhRGF0YSA9IEFscGhhT2JqZWN0Lk1ldGFEYXRhOwogICAgICB0aGlzLmFscGhhZGF0YS5UaW1lU2VyaWVzID0gQWxwaGFPYmplY3QuVGltZVNlcmllczE1bWluOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuZ2V0QWxwaGFWYW50YWdlKCk7CiAgfQp9Ow=="},{"version":3,"sources":["AlphaContainer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAA,iBAAA,MAAA,mCAAA;AAEA,IAAA,eAAA,GAAA,iBAAA,CAAA,GAAA,CAAA,OAAA,CAAA;AACA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,CAAA;AACA,QAAA,QAAA,EAAA,EADA;AAEA,QAAA,UAAA,EAAA;AAFA,OAAA;AADA,KAAA;AAMA,GARA;AASA,EAAA,OAAA,EAAA;AACA,IAAA,eADA,6BACA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,KAAA,CAAA,SAAA,GAAA,IAAA;AADA;AAAA,uBAEA,eAAA,CAAA,QAAA,EAFA;;AAAA;AAAA;AAEA,gBAAA,IAFA,QAEA,IAFA;;AAGA,gBAAA,KAAA,CAAA,eAAA,CAAA,IAAA;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,KALA;AAOA,IAAA,eAPA,2BAOA,WAPA,EAOA;AACA,WAAA,SAAA,CAAA,QAAA,GAAA,WAAA,CAAA,QAAA;AACA,WAAA,SAAA,CAAA,UAAA,GAAA,WAAA,CAAA,eAAA;AACA;AAVA,GATA;AAqBA,EAAA,OArBA,qBAqBA;AACA,SAAA,eAAA;AACA;AAvBA,CAAA","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"row\">\n      <div class=\"col-sm-10\">\n        <h1>AlphaVantage Data</h1>\n        <hr><br><br>\n       <!-- <button type=\"button\" class=\"btn btn-success btn-sm\">Add Book</button> -->\n        <br><br>\n        <table class=\"table table-hover\">\n          <thead>\n            <tr v-for=\"(item, index) in alphadata.MetaData\" :key=\"index\">\n              <td scope=\"col\"> {{ item }}</td>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(item, index) in alphadata.TimeSeries\" :key=\"index\">\n              <td scope=\"col\" v-for=\"(items, idx) in item\" :key=\"idx\"> {{idx}} {{ items }} </td>\n              <td>\n              </td>\n              <td>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport RepositoryFactory from '../repositories/RepositoryFactory';\n\nconst PostsRepository = RepositoryFactory.get('posts');\nexport default {\n  data() {\n    return {\n      alphadata: [{\n        MetaData: {},\n        TimeSeries: {},\n      }],\n    };\n  },\n  methods: {\n    async getAlphaVantage() {\n      this.isLoading = true;\n      const { data } = await PostsRepository.getAlpha();\n      this.MassageResponse(data);\n    },\n\n    MassageResponse(AlphaObject) {\n      this.alphadata.MetaData = AlphaObject.MetaData;\n      this.alphadata.TimeSeries = AlphaObject.TimeSeries15min;\n    },\n  },\n  created() {\n    this.getAlphaVantage();\n  },\n};\n</script>\n"],"sourceRoot":"src/components"}]}