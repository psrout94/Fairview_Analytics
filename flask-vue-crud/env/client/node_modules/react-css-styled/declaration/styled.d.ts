/// <reference types="react" />
import { IObject } from "@daybrush/utils";
import { InjectResult } from "css-styled";
export default function styled<T extends HTMLElement | SVGElement = HTMLElement>(Tag: string, css: string): {
    new (props: Readonly<IObject<any>>): {
        element: T;
        injectResult: InjectResult | null;
        render(): import("react").DOMElement<{
            children?: import("react").ReactNode;
            ref: (e: any) => void;
            className: string;
        }, any>;
        componentDidMount(): void;
        componentWillUnmount(): void;
        getElement(): T;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<IObject<any>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<IObject<any>> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
    };
    new (props: IObject<any>, context?: any): {
        element: T;
        injectResult: InjectResult | null;
        render(): import("react").DOMElement<{
            children?: import("react").ReactNode;
            ref: (e: any) => void;
            className: string;
        }, any>;
        componentDidMount(): void;
        componentWillUnmount(): void;
        getElement(): T;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<IObject<any>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        readonly props: Readonly<IObject<any>> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
    };
    contextType?: import("react").Context<any> | undefined;
};
