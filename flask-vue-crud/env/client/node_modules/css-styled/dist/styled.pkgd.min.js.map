{"version":3,"file":"styled.pkgd.min.js","sources":["../src/utils.ts","../src/styled.ts"],"sourcesContent":["import stringHash from \"string-hash\";\nimport { splitComma } from \"@daybrush/utils\";\n\nexport function getHash(str: string) {\n  return stringHash(str).toString(36);\n}\nexport function getShadowRoot(parentElement: HTMLElement | SVGElement) {\n    if (parentElement.getRootNode) {\n        const rootNode = parentElement.getRootNode();\n\n        if (rootNode.nodeType === 11) {\n            return rootNode;\n        }\n    }\n    return;\n}\nexport function injectStyle(className: string, css: string, shadowRoot?: Node) {\n  const style = document.createElement(\"style\");\n\n  style.setAttribute(\"type\", \"text/css\");\n  style.innerHTML = css.replace(/([^}{]*){/mg, (all, selector) => {\n    return splitComma(selector).map(subSelector => {\n      if (subSelector.indexOf(\":global\") > -1) {\n        return subSelector.replace(/\\:global/g, \"\");\n      } else if (subSelector.indexOf(\":host\") > -1) {\n        return `${subSelector.replace(/\\:host/g, `.${className}`)}`;\n      }\n      return `.${className} ${subSelector}`;\n    }).join(\", \") + \"{\";\n  });\n\n  (shadowRoot || document.head || document.body).appendChild(style);\n  return style;\n}\n","import { getHash, injectStyle, getShadowRoot } from \"./utils\";\nimport { StyledInjector } from \"./types\";\n\nexport default function styled(css: string): StyledInjector {\n    const injectClassName = \"rCS\" + getHash(css);\n    let injectCount = 0;\n    let injectElement!: HTMLStyleElement;\n\n    return {\n        className: injectClassName,\n        inject(el: HTMLElement | SVGElement) {\n            const shadowRoot = getShadowRoot(el);\n            const firstMount = injectCount === 0;\n            let styleElement: HTMLStyleElement;\n\n            if (shadowRoot || firstMount) {\n                styleElement = injectStyle(injectClassName, css, shadowRoot);\n            }\n            if (firstMount) {\n                injectElement = styleElement;\n              }\n            if (!shadowRoot) {\n                ++injectCount;\n            }\n            return {\n                destroy() {\n                    if (shadowRoot) {\n                        el.removeChild(styleElement);\n                        styleElement = null;\n                    } else {\n                        if (injectCount > 0) {\n                            --injectCount;\n                        }\n                        if (injectCount === 0 && injectElement) {\n                            injectElement.parentNode!.removeChild(injectElement);\n                            injectElement = null;\n                        }\n                    }\n                },\n            };\n        },\n    };\n}\n\nexport * from \"./types\";\n"],"names":["injectStyle","className","css","shadowRoot","style","document","createElement","setAttribute","innerHTML","replace","all","selector","map","subSelector","indexOf","join","head","body","appendChild","injectElement","injectClassName","stringHash","toString","injectCount","inject","el","styleElement","parentElement","getRootNode","rootNode","nodeType","getShadowRoot","firstMount","destroy","removeChild","parentNode"],"mappings":";;;;;;;;2RAgBgBA,EAAYC,EAAmBC,EAAaC,OACpDC,EAAQC,SAASC,cAAc,gBAErCF,EAAMG,aAAa,OAAQ,YAC3BH,EAAMI,UAAYN,EAAIO,QAAQ,cAAe,SAACC,EAAKC,aAC/BA,0HAAUC,IAAI,SAAAC,UACQ,EAAlCA,EAAYC,QAAQ,WACfD,EAAYJ,QAAQ,YAAa,KACC,EAAhCI,EAAYC,QAAQ,SACtB,GAAGD,EAAYJ,QAAQ,UAAW,IAAIR,GAExC,IAAIA,MAAaY,IACvBE,KAAK,MAAQ,aAGjBZ,GAAcE,SAASW,MAAQX,SAASY,MAAMC,YAAYd,GACpDA,kBC7BsBF,OAGvBiB,EAFEC,EAAkB,MDAnBC,ECAmCnB,GDAnBoB,SAAS,ICC1BC,EAAc,QAGX,CACHtB,UAAWmB,EACXI,OAAA,SAAOC,OAGCC,EAFEvB,WDLYwB,MACtBA,EAAcC,YAAa,KACrBC,EAAWF,EAAcC,iBAEL,KAAtBC,EAASC,gBACFD,GCAYE,CAAcN,GAC3BO,EAA6B,IAAhBT,SAGfpB,GAAc6B,KACdN,EAAe1B,EAAYoB,EAAiBlB,EAAKC,IAEjD6B,IACAb,EAAgBO,GAEfvB,KACCoB,EAEC,CACHU,QAAA,WACQ9B,GACAsB,EAAGS,YAAYR,GACfA,EAAe,OAEG,EAAdH,KACEA,EAEc,IAAhBA,GAAqBJ,IACrBA,EAAcgB,WAAYD,YAAYf,GACtCA,EAAgB"}